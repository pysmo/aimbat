{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"AIMBAT <p> Automated and Interactive Measurement of Body wave Arrival Times </p> <p> Documentation: https://aimbat.readthedocs.io </p> <p> Source Code: https://github.com/pysmo/aimbat </p> <p>AIMBAT (Automated and Interactive Measurement of Body wave Arrival Times) is an open-source software package for efficiently measuring teleseismic body wave arrival times for large seismic arrays [1]. It is based on a widely used method called MCCC (Multi-Channel Cross-Correlation) [2]. The package is automated in the sense of initially aligning seismograms for MCCC, which is achieved by an ICCS (Iterative Cross Correlation and Stack) algorithm. Meanwhile, a GUI (graphical user interface) is built to perform seismogram quality control interactively. Therefore, user processing time is reduced while valuable input from a user's expertise is retained. As a byproduct, SAC [3] plotting and phase picking functionalities are replicated and enhanced.</p> <p>Modules and scripts included in the AIMBAT package were developed using Python and its open-source modules on the Mac OS X platform since 2009. The original MCCC [2] code was transcribed into Python. The GUI of AIMBAT was inspired and initiated at the 2009 EarthScope USArray Data Processing and Analysis Short Course. AIMBAT runs on Mac OS X, Linux/Unix and Windows thanks to the platform-independent feature of Python.</p> <p>For more information visit the project website or the pysmo repositories.</p>"},{"location":"#authors-contacts","title":"Authors' Contacts","text":"<ul> <li> <p>Xiaoting Lou Email: xlou at u.northwestern.edu</p> </li> <li> <p>Suzan van der Lee Email: suzan at northwestern.edu</p> </li> <li> <p>Simon Lloyd Email: simon at pysmo.org</p> </li> </ul>"},{"location":"#references","title":"References","text":"<p>[1] Xiaoting Lou, Suzan van der Lee, and Simon Lloyd (2013), AIMBAT: A Python/Matplotlib Tool for Measuring Teleseismic Arrival Times. Seismol. Res. Lett., 84(1), 85-93, doi:10.1785/0220120033.</p> <p>[2] VanDecar, J. C., and R. S. Crosson (1990), Determination of teleseismic relative phase arrival times using multi-channel cross-correlation and least squares. Bulletin of the Seismological Society of America, 80(1), 150\u2013169.</p> <p>[3] Goldstein, P., D. Dodge, M. Firpo, and L. Minner (2003), SAC2000: Signal processing and analysis tools for seismologists and engineers, International Geophysics, 81, 1613\u20131614.</p>"},{"location":"examples/tutorial/","title":"Jupyter Notebook","text":"In\u00a0[1]: Copied! <pre>%matplotlib widget\n</pre> %matplotlib widget In\u00a0[2]: Copied! <pre>import tempfile\nimport os\n\nexample_project = tempfile.mktemp(prefix=\"aimbat_project_\", suffix=\".db\")\nsampledata_directory = tempfile.mkdtemp(prefix=\"aimbat_sample_data_\")\nos.environ[\"AIMBAT_PROJECT\"] = example_project\nos.environ[\"AIMBAT_SAMPLEDATA_DIR\"] = sampledata_directory\n</pre> import tempfile import os  example_project = tempfile.mktemp(prefix=\"aimbat_project_\", suffix=\".db\") sampledata_directory = tempfile.mkdtemp(prefix=\"aimbat_sample_data_\") os.environ[\"AIMBAT_PROJECT\"] = example_project os.environ[\"AIMBAT_SAMPLEDATA_DIR\"] = sampledata_directory <p>Note</p> <p>         By default, all AIMBAT commands assume the project a file called \"aimbat.db\" in the current directory. Here we override that behavior by settings     </p> In\u00a0[3]: Copied! <pre>from aimbat.lib.project import create_project, delete_project\n</pre> from aimbat.lib.project import create_project, delete_project In\u00a0[4]: Copied! <pre>create_project()\n</pre> create_project() <p>Creating an AIMBAT project creates a new sqlite file to store filepaths and processing data in. This also includes some defaults (which can be set on a per project basis too). To use this sqlite database we import the \"engine\" that points towards it:</p> In\u00a0[5]: Copied! <pre>from aimbat.lib.db import engine\n</pre> from aimbat.lib.db import engine In\u00a0[6]: Copied! <pre>from aimbat.lib.utils.sampledata import download_sampledata, delete_sampledata\nfrom glob import glob\n\ndownload_sampledata()\nsacfiles = glob(sampledata_directory + \"/**/*.BHZ\", recursive=True)\nprint(f\"Downloaded {len(sacfiles)} files\")\n</pre> from aimbat.lib.utils.sampledata import download_sampledata, delete_sampledata from glob import glob  download_sampledata() sacfiles = glob(sampledata_directory + \"/**/*.BHZ\", recursive=True) print(f\"Downloaded {len(sacfiles)} files\") <pre>Downloaded 163 files\n</pre> In\u00a0[7]: Copied! <pre>from aimbat.lib.data import add_files_to_project\nfrom aimbat.lib.io import DataType\n\nadd_files_to_project(sacfiles, DataType.SAC)\n</pre> from aimbat.lib.data import add_files_to_project from aimbat.lib.io import DataType  add_files_to_project(sacfiles, DataType.SAC) In\u00a0[8]: Copied! <pre>from aimbat.lib.seismogram import plot_seismograms\nfrom aimbat.lib.models import AimbatEvent\nfrom aimbat.lib.event import print_event_table, set_active_event\n\nprint_event_table()\n</pre> from aimbat.lib.seismogram import plot_seismograms from aimbat.lib.models import AimbatEvent from aimbat.lib.event import print_event_table, set_active_event  print_event_table() <pre>                                                   AIMBAT Events                                                   \n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502                \u2502        \u2502                     \u2502          \u2502           \u2502        \u2502          \u2502     #     \u2502    #     \u2502\n\u2502 id (shortened) \u2502 Active \u2502     Date &amp; Time     \u2502 Latitude \u2502 Longitude \u2502 Depth  \u2502 Complet\u2026 \u2502 Seismogr\u2026 \u2502 Stations \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502       c6       \u2502        \u2502 2011-09-15 19:31:04 \u2502 -21.611  \u2502 -179.528  \u2502 644600 \u2502  False   \u2502    163    \u2502   163    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</pre> In\u00a0[9]: Copied! <pre>from sqlmodel import Session, select\n\nwith Session(engine) as session:\n    set_active_event(session, session.exec(select(AimbatEvent)).one())\nplot_seismograms()\ndelete_sampledata()\n</pre> from sqlmodel import Session, select  with Session(engine) as session:     set_active_event(session, session.exec(select(AimbatEvent)).one()) plot_seismograms() delete_sampledata()                      Figure                  In\u00a0[10]: Copied! <pre>delete_project()\n</pre> delete_project()"},{"location":"examples/tutorial/#jupyter-notebook","title":"Jupyter Notebook\u00b6","text":""},{"location":"examples/tutorial/#prerequisites","title":"Prerequisites\u00b6","text":"<p>AIMBAT can run in a Jupyter Notebook. However, as AIMBAT uses interactive GUI elements, we must specify that we want those to open inside the notebook rather than independant windows. For matplotlib this is done by using the Ipython magic command :</p>"},{"location":"examples/tutorial/#environment-setup","title":"Environment Setup\u00b6","text":"<p>For this example project we create a temporary directory to store seismogram data, and a temporary file to store the aimbat project.</p>"},{"location":"examples/tutorial/#create-a-new-project","title":"Create a new Project\u00b6","text":""},{"location":"first-steps/data/","title":"Data","text":"<p>Because a lot of operations in AIMBAT involve adjusting parameters that do not require reading entire seismograms, the time series components of the seismograms are kept separate from the rest of the data. If this were not the case, doing something like adjusting the time window for the cross-correlation for an event with 200 seismograms, would require reading all 200 seismograms from disk, even though their data are not actually used for that operation. Not having to do this naturally benefits performance, but also means that an AIMBAT project does not really use up much disk space at all. As this is true for any amount of seismograms, we can include multiple events in a single project.</p>"},{"location":"first-steps/data/#data-hierarchy","title":"Data hierarchy","text":"<p>Moving away from storing all data in individual files means things are organised differently. Most importantly, seismograms, after importing them into a project, no longer each contain event and station information. Instead they use (and share) separately stored events and stations. Thus a single event will contain multiple seismograms. The same is true for a single station, while the seismograms themselves use exactly one event, one station, and one data source (containing the time series).</p> <pre><code>---\ntitle: AIMBAT data hierarchy\n---\nerDiagram\n    EVENT ||--o{ SEISMOGRAM : \"used by\"\n    STATION ||--o{ SEISMOGRAM : \"used by\"\n    SEISMOGRAM ||--|| \"DATA SOURCE\" : uses\n\n</code></pre> <p>While all of this happens transparently to the user, there are still some things to be mindful of:</p> <ul> <li>Seismograms that are supposed to be processed together are no longer   identified e.g. by being stored in the same directory, but instead from using   the same event and station. Thus the files they are created from when adding   them to an AIMBAT project must contain identical station and event data.</li> <li>Deleting<sup>2</sup> an event or station from a project will remove all related   seismograms.</li> <li>Conversely, deleting a seismogram will not remove the event or   station. This remains true even if an event or station end up not being used   by any seismograms in the project.</li> <li>After importing a seismogram into a project, it no longer accesses the   metadata stored in the source file. It does, however, still need to be able   to read the time series data from it.</li> </ul> <p>Tip</p> <p>If this all seems overly complicated to you, remember that often parameters that apply to all seismograms of an event need to be changed to the same value. Organising the data like this means we only need to change the parameters in one place. And there are some additional perks when setting things up this way!</p>"},{"location":"first-steps/data/#project-file","title":"Project file","text":"<p>If the above section sounded a bit \"databasey\" to you, that is because you are spot on! AIMBAT projects consist of a single sqlite file (which is automatically generated when a new project is created). This file contains a database to manage all aspects of an AIMBAT project. Understanding the internals of this file (or all the tables used in the database) is not particularly important for normal usage, though it might be useful to look at the data directly in cases where AIMBAT behaves in unexpected ways (e.g. due to inconsistencies in the seismogram files used as input). To do this we suggest viewing the database in tools such as DB Browser for SQLite. </p>"},{"location":"first-steps/data/#parameters","title":"Parameters","text":"<p>As alluded to above, there is a hierarchy to how data are structured in AIMBAT, and a major benefit of this is that parameters can be applied at different levels. Thus there are three tiers of parameters that control behaviour and processing:</p> <ol> <li>AIMBAT defaults: shared across all events and seismograms in a project.</li> <li>Event parameters: specific to an event (or shared across all seismograms     of that event).</li> <li>Seismogram parameters: specific to a single seismogram.</li> </ol>"},{"location":"first-steps/data/#aimbat-defaults","title":"AIMBAT Defaults","text":"<p>AIMBAT defaults are global settings that control how the application itself behaves, as well as defaults for event and seismogram parameters when they are instantiated. The currently used values for these parameters can be found by running <code>aimbat settings</code> in your terminal. As some settings are relevant before a project is created, they cannot stored in the project file. To override these settings you can set the corresponding environment variable directly (e.g. <code>export AIMBAT_PROJECT=different_project_name.db</code>) or place those settings in a <code>.env</code><sup>1</sup> file. Note that if you set them in both places the environment variable is used.</p>"},{"location":"first-steps/data/#event-parameters","title":"Event Parameters","text":"<p>Event parameters are used during processing. They are parameters that are specific to an event (e.g. if an event should be marked as completed), or parameters that are shared across all seismograms of that event (e.g. time window for the cross-correlation, filter parameters, etc.). These parameters are attributes of the <code>AimbatEventParametersBase</code> class.</p>"},{"location":"first-steps/data/#seismogram-parameters","title":"Seismogram Parameters","text":"<p>Seismogram parameters are also used during processing. Most notably the time picks belong to this tier. These parameters are attributes of the <code>AimbatSeismogramParametersBase</code> class.</p>"},{"location":"first-steps/data/#snapshots","title":"Snapshots","text":"<p>The event and seismogram parameters are stored separately from the events and seismograms (much like the seismograms link to an event and station instead of saving them in the same object). This opens up the possibility to save an arbitrary number of copies of these parameters that capture the current state of processing. This allows for risk free experimentation with different parameters - if something goes wrong, you can always roll back to the last (or any other) snapshot.</p> <p>Tip</p> <p>It is always a good idea to create a snapshot right after importing new data!</p>"},{"location":"first-steps/data/#uuid-universally-unique-identifiers","title":"UUID (Universally Unique Identifiers)","text":"<p>Internally, the items in a project use UUIDs to identify themselves. They look something like this:</p> <pre><code>37a8245f-c508-46a7-9bbc-d1c601e42983\n</code></pre> <p>The length and randomness of these identifiers guarantee no two items will ever have the same ID (even if generated on two separate computers, in different databases etc.), but they are a bit unwieldy to use directly. To make things easier, they are typically presented in a truncated form to the user (but always long enough to be unique). For example, if there are only four seismograms and they have these UUIDS:</p> <pre><code>6a4acdf7-6c7b-4523-aaaa-0a674cdc5f2d\n647568aa-8361-45ef-bfc8-61f873847f17\nc980918d-106d-44d9-a3fa-5740f58edf4e\n5dcb5c4b-b416-4a7b-870f-9a8da42a7dd2\n</code></pre> <p>they can still be unambiguously identified using only the first two characters:</p> <pre><code>6a\n64\nc9\n5d\n</code></pre> <p>If two characters are insufficient, then three will be used, and so on.</p> <ol> <li> <p>The file must be named exactly <code>.env</code>, and not <code>SOMENAME.env</code>!\u00a0\u21a9</p> </li> <li> <p>Deleting items from a project simply drops them from the project. AIMBAT will never delete (or modify) any files.\u00a0\u21a9</p> </li> </ol>"},{"location":"first-steps/installation/","title":"Installing AIMBAT","text":"<p>AIMBAT is built on top of standard Python and uses some popular third party modules (e.g. NumPy, SciPy). In order to benefit from modern Python features and up to date modules, AIMBAT is developed on the latest stable Python versions. Automatic tests are done on version 3.12 and newer.</p> <p>AIMBAT is available as a package from the Python Package Index. This means it can be installed using the <code>pip</code> module. However, as AIMBAT is a standalone application (rather than a library), we recommend installing it using <code>uv</code> instead. <code>uv</code> is a single binary that doesn't require any dependencies to be installed, and it allows to install and run AIMBAT in an isolated environment.</p>"},{"location":"first-steps/installation/#running-aimbat-without-installing","title":"Running AIMBAT without installing","text":"<p>Running applications with <code>uv</code> is very simple. It manages all dependencies and even installs a compatible Python version if needed. A very convenient feature of using <code>uv</code> is that it can run applications without installing them:</p> <pre><code>$ # First check that uv is available:\n$ uv --version\nuv 0.8.14\n$ # Next run AIMBAT using uv tool:\n$ uv tool run aimbat\n\u2826 Resolving dependencies...\n...\nUsage: aimbat COMMAND\n\nAIMBAT command line interface entrypoint for all other commands.\n\nThis is the main command line interface for AIMBAT. It must be\nexecuted with a command (as specified below) to actually do anything.\nHelp for individual commands is available by typing aimbat COMMAND\n--help.\n\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 data        Manage seismogram files in an AIMBAT project.         \u2502\n\u2502 event       View and manage events in the AIMBAT project.         \u2502\n\u2502 iccs        ICCS processing tools.                                \u2502\n\u2502 project     Manage AIMBAT projects.                               \u2502\n\u2502 seismogram  View and manage seismograms in the AIMBAT project.    \u2502\n\u2502 settings    Print a table with default settings used in AIMBAT.   \u2502\n\u2502 snapshot    View and manage snapshots.                            \u2502\n\u2502 station     View and manage stations.                             \u2502\n\u2502 utils       Utilities for AIMBAT.                                 \u2502\n\u2502 --help -h   Display this message and exit.                        \u2502\n\u2502 --version   Display application version.                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>This will likely have taken a while, as <code>uv</code> has to download and install a lot of dependencies. Subsequent runs will be much faster. <code>uv tool run</code> is such a useful command that it has its own alias, <code>uvx</code>:</p> <pre><code># 'uvx' is an alias for 'uv tool run':\n$ uvx aimbat\nUsage: aimbat COMMAND\n...\n</code></pre>"},{"location":"first-steps/installation/#running-the-development-version","title":"Running the development version","text":"<p>Running AIMBAT without installing it is particularly useful for trying out the latest development version:</p> <pre><code>$ uvx git+https://github.com/pysmo/aimbat --version\nUpdating https://github.com/pysmo/aimbat (HEAD)\n\u2807 Resolving dependencies...\n\u2826 Preparing packages... (66/69)\n---&gt; 100%\n---&gt; 100%\n2.1.0.dev0\n</code></pre> <p>To clean up after yourself, you can remove the <code>uv</code> cache:</p> <pre><code>$ uv clean\nClearing cache at: /home/USER/.cache/uv\nRemoved 26702 files (2.1GiB)\n</code></pre>"},{"location":"first-steps/installation/#installing-aimbat-locally","title":"Installing AIMBAT locally","text":"<p>After successfully test driving AIMBAT you may want to actually install it. This is very simple with <code>uv</code>:</p> <pre><code># Again use uv tool, but this time with the 'install' command:\n$ uv tool install aimbat\n\u2826 Resolving dependencies...\n\u2807 Preparing packages... (66/69)\n+ aimbat==2.0.0\n...\nInstalled 1 executable: aimbat\n</code></pre> <p>You can now run AIMBAT using the <code>aimbat</code> command directly:</p> <pre><code>$ aimbat\nUsage: aimbat COMMAND\n...\n</code></pre> <p>Tip</p> <p>If the above command fails (because your shell can't find the <code>aimbat</code> command), you may need to add <code>~/.local/bin</code> to your <code>PATH</code>. This can be done automatically by running <code>uv tool update-shell</code>.</p> <p>Upgrading or uninstalling AIMBAT is just as easy:</p> <pre><code>$ uv tool upgrade aimbat\nNothing to upgrade\n$ uv tool uninstall aimbat\nUninstalled 1 executable: aimbat\n</code></pre>"},{"location":"first-steps/installation/#demo","title":"Demo","text":"<p>This demo shows what you can expect to see in your terminal when running the commands above:</p> <p>Tip</p> <p>These kinds of recordings work just like normal videos, but you can also select text and copy it to your clipboard!</p>"},{"location":"first-steps/workflow/","title":"Workflow and Strategy","text":""},{"location":"first-steps/workflow/#without-aimbat","title":"Without AIMBAT","text":"<p>Multi-Channel Cross-Correlation<sup>1</sup> (MCCC) relies on narrow time windows, focused on the initial arrival arrival of the targeted phase in order to yield high quality results. Manually picking the phase arrival on each seismogram individually is a very time consuming task, which we highlight with stacked cards in the below flowchart:</p> <pre><code>flowchart TD\n  A@{ shape: circle, label: \"Start\"} --&gt; B&gt;Import seismograms];\n  B --&gt; C[Select suitable filter parameters]\n  C --&gt; D[Choose high quality seismograms to use for MCCC]\n  D --&gt; E@{ shape: processes, label: \"Individually pick phase arrival for seismograms 1...N\"}\n  E --&gt; F[Choose time window for MCCC]\n  F --&gt; G&gt;Run MCCC to align seismograms]</code></pre>"},{"location":"first-steps/workflow/#with-aimbat","title":"With AIMBAT","text":"<p>AIMBAT<sup>2</sup> stacks all input seismograms (aligned on the picked phase arrival) and operates on that stack instead of individual seismograms. This allows picking the phase arrival once for all seismograms simultaneously, and then improving it iteratively before running MCCC. Note that both the ICCS algorithm, as well as adjusting AIMBAT parameters are iterative processes.</p> <pre><code>flowchart TD\n  A@{ shape: circle, label: \"Start\"}\n  A --&gt; B&gt;Import seismograms containing initial picks t0];\n  B --&gt; F\n  E[Adjust AIMBAT parameters];\n  E --&gt; F&gt;Run ICCS with intial/updated parameters]\n  F --&gt; G[Inspect results of alignment];\n  G --&gt; H{\"Continue\n          with\n          MCCC?\"}\n  H ----&gt;|Yes| M&gt;\"Run MCCC for final alignment\"];\n  H --&gt;|No| E;</code></pre>"},{"location":"first-steps/workflow/#strategy","title":"Strategy","text":"<p>AIMBAT does not prescribe a single strategy for picking processing parameters. Generally speaking, we recommend adjusting only one parameter at a time between ICCS runs, and prioritising them as follows:</p> <ol> <li>Filter parameters.</li> <li>Selection of high quality seismograms.</li> <li>Time window boundaries</li> <li>Manually picking phase arrival.</li> </ol> <p>Tip</p> <p>Remember that you can create snapshots of the current AIMBAT parameters at any time, and then rollback to that state if you notice you went into the wrong direction. We therefore encourage experimenting a bit with the strategy, as different events may require doing things slightly differently.</p> <pre><code>---\ntitle: AIMBAT Workflow\n---\nflowchart TD\n  A[Start] --&gt; B&gt;Check data];\n  B --&gt; C{\"Any\n          errors?\"};\n  C ---&gt;|No| G&gt;Import files to AIMBAT and\n              run ICCS with initial picks\n              and default parameters];\n  C --&gt;|Yes| F[Fix files];\n  F --&gt; B;\n  G --&gt; I[\"Inspect initial results\"];\n\n  I --&gt; Iq2{\"Adjust\n                   filtering?\"};\n  Iq2 --&gt;|No| Iq3{\"Any bad\n                   traces?\"};\n  Iq3 --&gt;|No| Iq4{\"Adjust time\n                   window?\"};\n  Iq4 --&gt;|No| Iq5{\"Has the phase\n                   arrival emerged\n                   in stack?\"};\n  Iq5 --&gt;|No| Irerun;\n\n  Iq2 --&gt;|Yes| Iq2y[\"Set new filter parameters.\"];\n  Iq2y --&gt; Iq2yq{\"Re-run\n                  ICCS\n                  now?\"};\n  Iq2yq --&gt;|No|Iq3;\n  Iq2yq --&gt;|Yes|Irerun;\n\n  Iq3 --&gt;|Yes| Iq3y[\"Select/deselect seismograms.\"];\n  Iq3y --&gt; Iq3yq{\"Re-run\n                  ICCS\n                  now?\"};\n  Iq3yq --&gt;|No|Iq4;\n  Iq3yq --&gt;|Yes|Irerun;\n\n  Iq4 --&gt;|Yes| Iq4y[\"Pick new time window\"];\n  Iq4y --&gt; Iq4yq{\"Re-run\n                  ICCS\n                  now?\"};\n  Iq4yq --&gt;|No|Iq5;\n  Iq4yq --&gt;|Yes|Irerun;\n\n  Iq5 --&gt;|Yes| Iq5q{\"Is the pick\n                     on the visible\n                     arrival?\"};\n  Iq5q --&gt;|No| Iq5qy[\"Pick new Time\"]  --&gt; Irerun;\n  Iq5q --&gt;|Yes| Irerun;\n\n  Irerun&gt;\"Run ICCS with\n          updated settings\"] --&gt; I2;\n\n  I2[\"Inspect updated results\"];\n\n  I2 --&gt; qM{\"Continue\n             with\n             MCCC?\"}\n  qM --&gt;|Yes| M&gt;\"MCCC with final pick\n                  and time window\"] --&gt; Z[END];\n  qM --&gt;|No| Iq2;\n</code></pre> <ol> <li> <p>J. C. VanDecar and R. S. Crosson. Determination of teleseismic relative phase arrival times using multi-channel cross-correlation and least squares. Bulletin of the Seismological Society of America, 80(1):150\u2013169, February 1990. URL: https://doi.org/10.1785/BSSA0800010150 (visited on 2025-05-30), doi:10.1785/BSSA0800010150.\u00a0\u21a9</p> </li> <li> <p>X. Lou, S. Van Der Lee, and S. Lloyd. AIMBAT: A Python/Matplotlib Tool for Measuring Teleseismic Arrival Times. Seismological Research Letters, 84(1):85\u201393, January 2013. URL: https://pubs.geoscienceworld.org/srl/article/84/1/85-93/144018 (visited on 2025-05-30), doi:10.1785/0220120033.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#aimbat","title":"aimbat","text":"<p>AIMBAT (Automated and Interactive Measurement of Body wave Arrival Times) is an open-source software package for efficiently measuring teleseismic body wave arrival times for large seismic arrays (Lou et al., 2012). It is based on a widely used method called MCCC (Multi-Channel Cross-Correlation) developed by VanDecar and Crosson (1990). The package is automated in the sense of initially aligning seismograms for MCCC which is achieved by an ICCS (Iterative Cross Correlation and Stack) algorithm. Meanwhile, a graphical user interface is built to perform seismogram quality control interactively. Therefore, user processing time is reduced while valuable input from a user's expertise is retained. As a byproduct, SAC (Goldstein et al., 2003) plotting and phase picking functionalities are replicated and enhanced.</p>"},{"location":"reference/#aimbat.config","title":"config","text":"<p>Global configuration options for the AIMBAT application.</p>"},{"location":"reference/#aimbat.config.Settings","title":"Settings","text":"<p>               Bases: <code>BaseSettings</code></p> Source code in <code>aimbat/config.py</code> <pre><code>class Settings(BaseSettings):\n    model_config = SettingsConfigDict(env_prefix=\"aimbat_\", env_file=\".env\")\n\n    project: Path = Field(\n        default=Path(\"aimbat.db\"),\n        description=\"AIMBAT project file location (ignored if `db_url` is specified).\",\n    )\n    \"\"\"AIMBAT project file location.\"\"\"\n\n    db_url: str = Field(\n        default_factory=lambda data: r\"sqlite+pysqlite:///\" + str(data[\"project\"]),\n        description=\"AIMBAT database url (default value is derived from `project`.)\",\n    )\n    \"\"\"AIMBAT database url.\"\"\"\n\n    logfile: Path = Field(default=Path(\"aimbat.log\"), description=\"Log file location.\")\n    \"\"\"Log file location.\"\"\"\n\n    debug: bool = Field(default=False, description=\"Enable debug logging.\")\n    \"\"\"Enable debug logging.\"\"\"\n\n    window_pre: timedelta = Field(\n        default=ICCS_DEFAULTS.WINDOW_PRE,\n        lt=0,\n        description=\"Initial relative begin time of window.\",\n    )\n    \"\"\"Initial relative begin time of window.\"\"\"\n\n    window_post: timedelta = Field(\n        default=ICCS_DEFAULTS.WINDOW_POST,\n        ge=0,\n        description=\"Initial relative end time of window.\",\n    )\n    \"\"\"Initial relative end time of window.\"\"\"\n\n    window_padding: timedelta = Field(\n        default=ICCS_DEFAULTS.PLOT_PADDING,\n        gt=0,\n        description=\"Padding around time window.\",\n    )\n    \"\"\"Padding around time window.\"\"\"\n\n    min_ccnorm: float | np.floating = Field(\n        default=ICCS_DEFAULTS.MIN_CCNORM,\n        ge=0,\n        le=1,\n        description=\"Initial minimum cross correlation coefficient.\",\n    )\n    \"\"\"Initial minimum cross correlation coefficient.\"\"\"\n\n    sac_pick_header: str = Field(\n        default=\"t0\", description=\"SAC header field where initial pick is stored.\"\n    )\n    \"\"\"SAC header field where initial pick is stored.\"\"\"\n\n    sampledata_src: str = Field(\n        default=\"https://github.com/pysmo/data-example/archive/refs/heads/aimbat_v2.zip\",\n        description=\"URL where sample data is downloaded from.\",\n    )\n    \"\"\"URL where sample data is downloaded from.\"\"\"\n\n    sampledata_dir: Path = Field(\n        default=Path(\"sample-data\"),\n        description=\"Directory to store downloaded sample data.\",\n    )\n    \"\"\"Directory to store downloaded sample data.\"\"\"\n\n    min_id_length: int = Field(\n        default=2, ge=1, description=\"Minimum length of ID string.\"\n    )\n    \"\"\"Minimum length of truncated UUID string.\"\"\"\n</code></pre>"},{"location":"reference/#aimbat.config.Settings.db_url","title":"db_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>db_url: str = Field(\n    default_factory=lambda data: \"sqlite+pysqlite:///\"\n    + str(data[\"project\"]),\n    description=\"AIMBAT database url (default value is derived from `project`.)\",\n)\n</code></pre> <p>AIMBAT database url.</p>"},{"location":"reference/#aimbat.config.Settings.debug","title":"debug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug: bool = Field(\n    default=False, description=\"Enable debug logging.\"\n)\n</code></pre> <p>Enable debug logging.</p>"},{"location":"reference/#aimbat.config.Settings.logfile","title":"logfile  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>logfile: Path = Field(\n    default=Path(\"aimbat.log\"),\n    description=\"Log file location.\",\n)\n</code></pre> <p>Log file location.</p>"},{"location":"reference/#aimbat.config.Settings.min_ccnorm","title":"min_ccnorm  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_ccnorm: float | floating = Field(\n    default=MIN_CCNORM,\n    ge=0,\n    le=1,\n    description=\"Initial minimum cross correlation coefficient.\",\n)\n</code></pre> <p>Initial minimum cross correlation coefficient.</p>"},{"location":"reference/#aimbat.config.Settings.min_id_length","title":"min_id_length  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_id_length: int = Field(\n    default=2,\n    ge=1,\n    description=\"Minimum length of ID string.\",\n)\n</code></pre> <p>Minimum length of truncated UUID string.</p>"},{"location":"reference/#aimbat.config.Settings.project","title":"project  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>project: Path = Field(\n    default=Path(\"aimbat.db\"),\n    description=\"AIMBAT project file location (ignored if `db_url` is specified).\",\n)\n</code></pre> <p>AIMBAT project file location.</p>"},{"location":"reference/#aimbat.config.Settings.sac_pick_header","title":"sac_pick_header  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sac_pick_header: str = Field(\n    default=\"t0\",\n    description=\"SAC header field where initial pick is stored.\",\n)\n</code></pre> <p>SAC header field where initial pick is stored.</p>"},{"location":"reference/#aimbat.config.Settings.sampledata_dir","title":"sampledata_dir  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sampledata_dir: Path = Field(\n    default=Path(\"sample-data\"),\n    description=\"Directory to store downloaded sample data.\",\n)\n</code></pre> <p>Directory to store downloaded sample data.</p>"},{"location":"reference/#aimbat.config.Settings.sampledata_src","title":"sampledata_src  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>sampledata_src: str = Field(\n    default=\"https://github.com/pysmo/data-example/archive/refs/heads/aimbat_v2.zip\",\n    description=\"URL where sample data is downloaded from.\",\n)\n</code></pre> <p>URL where sample data is downloaded from.</p>"},{"location":"reference/#aimbat.config.Settings.window_padding","title":"window_padding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_padding: timedelta = Field(\n    default=PLOT_PADDING,\n    gt=0,\n    description=\"Padding around time window.\",\n)\n</code></pre> <p>Padding around time window.</p>"},{"location":"reference/#aimbat.config.Settings.window_post","title":"window_post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_post: timedelta = Field(\n    default=WINDOW_POST,\n    ge=0,\n    description=\"Initial relative end time of window.\",\n)\n</code></pre> <p>Initial relative end time of window.</p>"},{"location":"reference/#aimbat.config.Settings.window_pre","title":"window_pre  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_pre: timedelta = Field(\n    default=WINDOW_PRE,\n    lt=0,\n    description=\"Initial relative begin time of window.\",\n)\n</code></pre> <p>Initial relative begin time of window.</p>"},{"location":"reference/#aimbat.config.cli_settings_list","title":"cli_settings_list","text":"<pre><code>cli_settings_list(*, pretty: bool = True) -&gt; None\n</code></pre> <p>Print a table with default settings used in AIMBAT.</p> <p>These defaults control the default behavior of AIMBAT within a project. They can be changed using environment variables of the same name, or by adding a <code>.env</code> file to the current working directory.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Print the table in a pretty format.</p> <code>True</code> Source code in <code>aimbat/config.py</code> <pre><code>def cli_settings_list(\n    *,\n    pretty: bool = True,\n) -&gt; None:\n    \"\"\"Print a table with default settings used in AIMBAT.\n\n    These defaults control the default behavior of AIMBAT within a project.\n    They can be changed using environment variables of the same name, or by\n    adding a `.env` file to the current working directory.\n\n    Parameters:\n        pretty: Print the table in a pretty format.\n    \"\"\"\n    print_settings_table(pretty)\n</code></pre>"},{"location":"reference/#aimbat.config.cli_settings_list(pretty)","title":"<code>pretty</code>","text":""},{"location":"reference/#aimbat.config.print_settings_table","title":"print_settings_table","text":"<pre><code>print_settings_table(pretty: bool) -&gt; None\n</code></pre> <p>Print a pretty table with AIMBAT configuration options.</p> Source code in <code>aimbat/config.py</code> <pre><code>def print_settings_table(pretty: bool) -&gt; None:\n    \"\"\"Print a pretty table with AIMBAT configuration options.\"\"\"\n    from aimbat.lib.common import make_table, TABLE_STYLING\n    from rich.console import Console\n\n    env_prefix = Settings.model_config.get(\"env_prefix\")\n\n    if not pretty:\n        for k in Settings.model_fields:\n            print(\n                f'{(env_prefix + k).upper() if env_prefix else k}=\"{getattr(settings, k)}\"'\n            )\n        return\n\n    table = make_table(title=\"AIMBAT settings\")\n    table.add_column(\"Name\", justify=\"left\", style=TABLE_STYLING.id, no_wrap=True)\n    table.add_column(\"Value\", justify=\"center\", style=TABLE_STYLING.mine)\n    table.add_column(\"Description\", justify=\"left\", style=TABLE_STYLING.linked)\n\n    for k, v in Settings.model_fields.items():\n        env_var = (\n            f\"Environment variable: {env_prefix.upper()}{str(k).upper()}\"\n            if env_prefix\n            else \"\"\n        )\n        description_with_env_var = (\n            f\"{v.description} \" if v.description else \"\"\n        ) + env_var\n        table.add_row(k, str(getattr(settings, k)), description_with_env_var)\n\n    console = Console()\n    console.print(table)\n</code></pre>"},{"location":"reference/#aimbat.logger","title":"logger","text":"<p>Logging setup.</p>"},{"location":"reference/#aimbat.cli","title":"aimbat.cli","text":"<p>Modules:</p> Name Description <code>common</code> <p>Common parameters and functions for the AIMBAT CLI.</p> <code>data</code> <p>Manage seismogram files in an AIMBAT project.</p> <code>event</code> <p>View and manage events in the AIMBAT project.</p> <code>iccs</code> <p>ICCS processing tools.</p> <code>project</code> <p>Manage AIMBAT projects.</p> <code>seismogram</code> <p>View and manage seismograms in the AIMBAT project.</p> <code>snapshot</code> <p>View and manage snapshots.</p> <code>station</code> <p>View and manage stations.</p> <code>utils</code> <p>Utilities for AIMBAT.</p>"},{"location":"reference/cli/","title":"aimbat.cli","text":""},{"location":"reference/cli/#aimbat.cli","title":"aimbat.cli","text":"<p>Modules:</p> Name Description <code>common</code> <p>Common parameters and functions for the AIMBAT CLI.</p> <code>data</code> <p>Manage seismogram files in an AIMBAT project.</p> <code>event</code> <p>View and manage events in the AIMBAT project.</p> <code>iccs</code> <p>ICCS processing tools.</p> <code>project</code> <p>Manage AIMBAT projects.</p> <code>seismogram</code> <p>View and manage seismograms in the AIMBAT project.</p> <code>snapshot</code> <p>View and manage snapshots.</p> <code>station</code> <p>View and manage stations.</p> <code>utils</code> <p>Utilities for AIMBAT.</p>"},{"location":"reference/cli/#aimbat.cli.common","title":"common","text":"<p>Common parameters and functions for the AIMBAT CLI.</p> <p>Classes:</p> Name Description <code>GlobalParameters</code> <code>TableParameters</code> <p>Functions:</p> Name Description <code>simple_exception</code> <p>Decorator to handle exceptions and print them to the console.</p>"},{"location":"reference/cli/#aimbat.cli.common.GlobalParameters","title":"GlobalParameters  <code>dataclass</code>","text":"<p>Attributes:</p> Name Type Description <code>debug</code> <code>bool</code> <p>Run in debugging mode.</p> <code>use_qt</code> <code>bool</code> <p>Use pyqtgraph instead of matplotlib for plots (where applicable).</p> Source code in <code>aimbat/cli/common.py</code> <pre><code>@Parameter(name=\"*\")\n@dataclass\nclass GlobalParameters:\n    debug: bool = False\n    \"Run in debugging mode.\"\n\n    use_qt: bool = False\n    \"Use pyqtgraph instead of matplotlib for plots (where applicable).\"\n\n    def __post_init__(self) -&gt; None:\n        if self.debug:\n            settings.debug = True\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.common.GlobalParameters.debug","title":"debug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>debug: bool = False\n</code></pre> <p>Run in debugging mode.</p>"},{"location":"reference/cli/#aimbat.cli.common.GlobalParameters.use_qt","title":"use_qt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>use_qt: bool = False\n</code></pre> <p>Use pyqtgraph instead of matplotlib for plots (where applicable).</p>"},{"location":"reference/cli/#aimbat.cli.common.TableParameters","title":"TableParameters  <code>dataclass</code>","text":"<p>Attributes:</p> Name Type Description <code>short</code> <code>bool</code> <p>Shorten UUIDs and format data.</p> Source code in <code>aimbat/cli/common.py</code> <pre><code>@Parameter(name=\"*\")\n@dataclass\nclass TableParameters:\n    short: bool = True\n    \"Shorten UUIDs and format data.\"\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.common.TableParameters.short","title":"short  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>short: bool = True\n</code></pre> <p>Shorten UUIDs and format data.</p>"},{"location":"reference/cli/#aimbat.cli.common.simple_exception","title":"simple_exception","text":"<pre><code>simple_exception(func: F) -&gt; F\n</code></pre> <p>Decorator to handle exceptions and print them to the console.</p> <p>Using this decorator prints only the exception to the console without traceback, and then exits. In debugging mode this decorator returns the callable unchanged.</p> Source code in <code>aimbat/cli/common.py</code> <pre><code>def simple_exception[F: Callable[..., Any]](func: F) -&gt; F:\n    \"\"\"Decorator to handle exceptions and print them to the console.\n\n    Using this decorator prints only the exception to the console without\n    traceback, and then exits. In debugging mode this decorator returns the\n    callable unchanged.\n    \"\"\"\n    from functools import wraps\n    from rich.console import Console\n    from rich.panel import Panel\n    import sys\n\n    @wraps(func)\n    def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n        if settings.debug:\n            return func(*args, **kwargs)\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            console = Console()\n            panel = Panel(\n                f\"{e}\",\n                title=\"Error\",\n                title_align=\"left\",\n                border_style=\"red\",\n                expand=True,\n            )\n            console.print(panel)\n            sys.exit(1)\n\n    return wrapper  # type: ignore\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.data","title":"data","text":"<p>Manage seismogram files in an AIMBAT project.</p> <p>Functions:</p> Name Description <code>cli_data_add</code> <p>Add or update data files in the AIMBAT project.</p> <code>cli_data_dump</code> <p>Dump the contents of the AIMBAT data table to json.</p> <code>cli_data_list</code> <p>Print information on the data stored in AIMBAT.</p>"},{"location":"reference/cli/#aimbat.cli.data.cli_data_add","title":"cli_data_add","text":"<pre><code>cli_data_add(\n    seismogram_files: Annotated[\n        list[Path],\n        Parameter(\n            name=files,\n            consume_multiple=True,\n            validator=Path(exists=True),\n        ),\n    ],\n    *,\n    filetype: DataType = SAC,\n    show_progress_bar: Annotated[\n        bool, Parameter(name=progress)\n    ] = True,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Add or update data files in the AIMBAT project.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[list[Path], Parameter(name=files, consume_multiple=True, validator=Path(exists=True))]</code> <p>Seismogram files to be added.</p> required <code>DataType</code> <p>Specify type of seismogram file.</p> <code>SAC</code> <code>Annotated[bool, Parameter(name=progress)]</code> <p>Display progress bar.</p> <code>True</code> Source code in <code>aimbat/cli/data.py</code> <pre><code>@app.command(name=\"add\")\ndef cli_data_add(\n    seismogram_files: Annotated[\n        list[Path],\n        Parameter(\n            name=\"files\", consume_multiple=True, validator=validators.Path(exists=True)\n        ),\n    ],\n    *,\n    filetype: DataType = DataType.SAC,\n    show_progress_bar: Annotated[bool, Parameter(name=\"progress\")] = True,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Add or update data files in the AIMBAT project.\n\n    Parameters:\n        seismogram_files: Seismogram files to be added.\n        filetype: Specify type of seismogram file.\n        show_progress_bar: Display progress bar.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _add_files_to_project(seismogram_files, filetype, show_progress_bar)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.data.cli_data_add(seismogram_files)","title":"<code>seismogram_files</code>","text":""},{"location":"reference/cli/#aimbat.cli.data.cli_data_add(filetype)","title":"<code>filetype</code>","text":""},{"location":"reference/cli/#aimbat.cli.data.cli_data_add(show_progress_bar)","title":"<code>show_progress_bar</code>","text":""},{"location":"reference/cli/#aimbat.cli.data.cli_data_dump","title":"cli_data_dump","text":"<pre><code>cli_data_dump(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Dump the contents of the AIMBAT data table to json.</p> Source code in <code>aimbat/cli/data.py</code> <pre><code>@app.command(name=\"dump\")\ndef cli_data_dump(\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Dump the contents of the AIMBAT data table to json.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _dump_data_table()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.data.cli_data_list","title":"cli_data_list","text":"<pre><code>cli_data_list(\n    *,\n    all_events: Annotated[\n        bool, Parameter(name=all)\n    ] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Print information on the data stored in AIMBAT.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[bool, Parameter(name=all)]</code> <p>Select data for all events.</p> <code>False</code> Source code in <code>aimbat/cli/data.py</code> <pre><code>@app.command(name=\"list\")\ndef cli_data_list(\n    *,\n    all_events: Annotated[bool, Parameter(name=\"all\")] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Print information on the data stored in AIMBAT.\n\n    Parameters:\n        all_events: Select data for all events.\n    \"\"\"\n\n    table_parameters = table_parameters or TableParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _print_data_table(table_parameters.short, all_events)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.data.cli_data_list(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/cli/#aimbat.cli.event","title":"event","text":"<p>View and manage events in the AIMBAT project.</p> <p>Functions:</p> Name Description <code>cli_event_activate</code> <p>Select the event to be active for Processing.</p> <code>cli_event_delete</code> <p>Delete existing event.</p> <code>cli_event_dump</code> <p>Dump the contents of the AIMBAT event table to json.</p> <code>cli_event_list</code> <p>Print information on the events stored in AIMBAT.</p> <code>cli_event_parameter_get</code> <p>Get parameter value for the active event.</p> <code>cli_event_parameter_set</code> <p>Set parameter value for the active event.</p>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_activate","title":"cli_event_activate","text":"<pre><code>cli_event_activate(\n    event_id: Annotated[UUID | str, Parameter(name=id)],\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Select the event to be active for Processing.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Event ID number.</p> required Source code in <code>aimbat/cli/event.py</code> <pre><code>@app.command(name=\"activate\")\ndef cli_event_activate(\n    event_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Select the event to be active for Processing.\n\n    Parameters:\n        event_id: Event ID number.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _set_active_event_by_id(event_id)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_activate(event_id)","title":"<code>event_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.event.cli_event_delete","title":"cli_event_delete","text":"<pre><code>cli_event_delete(\n    event_id: Annotated[UUID | str, Parameter(name=id)],\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Delete existing event.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Event ID.</p> required Source code in <code>aimbat/cli/event.py</code> <pre><code>@app.command(name=\"delete\")\ndef cli_event_delete(\n    event_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Delete existing event.\n\n    Parameters:\n        event_id: Event ID.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _delete_event(\n        event_id,\n    )\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_delete(event_id)","title":"<code>event_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.event.cli_event_dump","title":"cli_event_dump","text":"<pre><code>cli_event_dump(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Dump the contents of the AIMBAT event table to json.</p> Source code in <code>aimbat/cli/event.py</code> <pre><code>@app.command(name=\"dump\")\ndef cli_event_dump(\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Dump the contents of the AIMBAT event table to json.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _dump_event_table()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_list","title":"cli_event_list","text":"<pre><code>cli_event_list(\n    *,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Print information on the events stored in AIMBAT.</p> Source code in <code>aimbat/cli/event.py</code> <pre><code>@app.command(name=\"list\")\ndef cli_event_list(\n    *,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Print information on the events stored in AIMBAT.\"\"\"\n\n    table_parameters = table_parameters or TableParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _print_event_table(table_parameters.short)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_parameter_get","title":"cli_event_parameter_get","text":"<pre><code>cli_event_parameter_get(\n    name: EventParameter,\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Get parameter value for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>EventParameter</code> <p>Event parameter name.</p> required Source code in <code>aimbat/cli/event.py</code> <pre><code>@app.command(name=\"get\")\ndef cli_event_parameter_get(\n    name: EventParameter,\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Get parameter value for the active event.\n\n    Parameters:\n        name: Event parameter name.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _get_event_parameters(name)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_parameter_get(name)","title":"<code>name</code>","text":""},{"location":"reference/cli/#aimbat.cli.event.cli_event_parameter_set","title":"cli_event_parameter_set","text":"<pre><code>cli_event_parameter_set(\n    name: EventParameter,\n    value: timedelta | str,\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Set parameter value for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>EventParameter</code> <p>Event parameter name.</p> required <code>timedelta | str</code> <p>Event parameter value.</p> required Source code in <code>aimbat/cli/event.py</code> <pre><code>@app.command(name=\"set\")\ndef cli_event_parameter_set(\n    name: EventParameter,\n    value: timedelta | str,\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Set parameter value for the active event.\n\n    Parameters:\n        name: Event parameter name.\n        value: Event parameter value.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _set_event_parameters(name, value)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.event.cli_event_parameter_set(name)","title":"<code>name</code>","text":""},{"location":"reference/cli/#aimbat.cli.event.cli_event_parameter_set(value)","title":"<code>value</code>","text":""},{"location":"reference/cli/#aimbat.cli.iccs","title":"iccs","text":"<p>ICCS processing tools.</p> <p>Launches various processing tools related to ICCS.</p> <p>Classes:</p> Name Description <code>IccsPlotParameters</code> <p>Functions:</p> Name Description <code>cli_iccs_plot_seismograms</code> <p>Plot the ICCS seismograms of the active event as an image.</p> <code>cli_iccs_plot_stack</code> <p>Plot the ICCS stack of the active event.</p> <code>cli_iccs_run</code> <p>Run the ICCS algorithm.</p> <code>cli_iccs_update_min_ccnorm</code> <p>Pick a new minimum cross-correlation norm for auto-selection.</p> <code>cli_iccs_update_pick</code> <p>Pick a new arrival time.</p> <code>cli_iccs_update_timewindow</code> <p>Pick a new time window.</p>"},{"location":"reference/cli/#aimbat.cli.iccs.IccsPlotParameters","title":"IccsPlotParameters  <code>dataclass</code>","text":"<p>Attributes:</p> Name Type Description <code>all</code> <code>bool</code> <p>Include all seismograms in the plot, even if not used in stack.</p> <code>pad</code> <code>bool</code> <p>Add extra padding to the time window for plotting.</p> Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@Parameter(name=\"*\")\n@dataclass\nclass IccsPlotParameters:\n    pad: bool = True\n    \"Add extra padding to the time window for plotting.\"\n    all: bool = False\n    \"Include all seismograms in the plot, even if not used in stack.\"\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.IccsPlotParameters.all","title":"all  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>all: bool = False\n</code></pre> <p>Include all seismograms in the plot, even if not used in stack.</p>"},{"location":"reference/cli/#aimbat.cli.iccs.IccsPlotParameters.pad","title":"pad  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pad: bool = True\n</code></pre> <p>Add extra padding to the time window for plotting.</p>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_plot_seismograms","title":"cli_iccs_plot_seismograms","text":"<pre><code>cli_iccs_plot_seismograms(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Plot the ICCS seismograms of the active event as an image.</p> <p>Parameters:</p> Name Type Description Default <p>Add extra padding to the time window for plotting.</p> required Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@plot.command(name=\"image\")\ndef cli_iccs_plot_seismograms(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Plot the ICCS seismograms of the active event as an image.\n\n    Parameters:\n        pad: Add extra padding to the time window for plotting.\n    \"\"\"\n\n    iccs_parameters = iccs_parameters or IccsPlotParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _plot_seismograms(iccs_parameters.pad, iccs_parameters.all)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_plot_seismograms(pad)","title":"<code>pad</code>","text":""},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_plot_stack","title":"cli_iccs_plot_stack","text":"<pre><code>cli_iccs_plot_stack(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Plot the ICCS stack of the active event.</p> Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@plot.command(name=\"stack\")\ndef cli_iccs_plot_stack(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Plot the ICCS stack of the active event.\"\"\"\n\n    iccs_parameters = iccs_parameters or IccsPlotParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _plot_stack(iccs_parameters.pad, iccs_parameters.all)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_run","title":"cli_iccs_run","text":"<pre><code>cli_iccs_run(\n    *,\n    autoflip: bool = False,\n    autoselect: bool = False,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Run the ICCS algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to automatically flip seismograms (multiply data by -1).</p> <code>False</code> <code>bool</code> <p>Whether to automatically de-select seismograms.</p> <code>False</code> Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@app.command(name=\"run\")\ndef cli_iccs_run(\n    *,\n    autoflip: bool = False,\n    autoselect: bool = False,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Run the ICCS algorithm.\n\n    Parameters:\n        autoflip: Whether to automatically flip seismograms (multiply data by -1).\n        autoselect: Whether to automatically de-select seismograms.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _run_iccs(autoflip, autoselect)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_run(autoflip)","title":"<code>autoflip</code>","text":""},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_run(autoselect)","title":"<code>autoselect</code>","text":""},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_update_min_ccnorm","title":"cli_iccs_update_min_ccnorm","text":"<pre><code>cli_iccs_update_min_ccnorm(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Pick a new minimum cross-correlation norm for auto-selection.</p> Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@update.command(name=\"ccnorm\")\ndef cli_iccs_update_min_ccnorm(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Pick a new minimum cross-correlation norm for auto-selection.\"\"\"\n\n    iccs_parameters = iccs_parameters or IccsPlotParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _update_min_ccnorm(iccs_parameters.pad, iccs_parameters.all)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_update_pick","title":"cli_iccs_update_pick","text":"<pre><code>cli_iccs_update_pick(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    use_seismogram_image: Annotated[\n        bool, Parameter(name=img)\n    ] = False,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Pick a new arrival time.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[bool, Parameter(name=img)]</code> <p>Use the seismogram image to update pick.</p> <code>False</code> Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@update.command(name=\"pick\")\ndef cli_iccs_update_pick(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    use_seismogram_image: Annotated[bool, Parameter(name=\"img\")] = False,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Pick a new arrival time.\n\n    Parameters:\n        use_seismogram_image: Use the seismogram image to update pick.\n    \"\"\"\n\n    iccs_parameters = iccs_parameters or IccsPlotParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _update_pick(\n        iccs_parameters.pad,\n        iccs_parameters.all,\n        use_seismogram_image,\n    )\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_update_pick(use_seismogram_image)","title":"<code>use_seismogram_image</code>","text":""},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_update_timewindow","title":"cli_iccs_update_timewindow","text":"<pre><code>cli_iccs_update_timewindow(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    use_seismogram_image: Annotated[\n        bool, Parameter(name=img)\n    ] = False,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Pick a new time window.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[bool, Parameter(name=img)]</code> <p>Use the seismogram image to pick the time window.</p> <code>False</code> Source code in <code>aimbat/cli/iccs.py</code> <pre><code>@update.command(name=\"window\")\ndef cli_iccs_update_timewindow(\n    *,\n    iccs_parameters: IccsPlotParameters | None = None,\n    use_seismogram_image: Annotated[bool, Parameter(name=\"img\")] = False,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Pick a new time window.\n\n    Parameters:\n        use_seismogram_image: Use the seismogram image to pick the time window.\n    \"\"\"\n\n    iccs_parameters = iccs_parameters or IccsPlotParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _update_timewindow(\n        iccs_parameters.pad,\n        iccs_parameters.all,\n        use_seismogram_image,\n    )\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.iccs.cli_iccs_update_timewindow(use_seismogram_image)","title":"<code>use_seismogram_image</code>","text":""},{"location":"reference/cli/#aimbat.cli.project","title":"project","text":"<p>Manage AIMBAT projects.</p> <p>This command manages projects. By default, the project consists of a file called <code>aimbat.db</code> in the current working directory. All aimbat commands must be executed from the same directory. The location (and name) of the project file may also be specified by setting the <code>AIMBAT_PROJECT</code> environment variable to the desired filename. Alternatively, <code>aimbat</code> can be executed with a database url directly.</p> <p>Functions:</p> Name Description <code>cli_project_create</code> <p>Create new AIMBAT project.</p> <code>cli_project_delete</code> <p>Delete project (note: this does not delete seismogram files).</p> <code>cli_project_info</code> <p>Show information on an exisiting project.</p>"},{"location":"reference/cli/#aimbat.cli.project.cli_project_create","title":"cli_project_create","text":"<pre><code>cli_project_create(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Create new AIMBAT project.</p> Source code in <code>aimbat/cli/project.py</code> <pre><code>@app.command(name=\"create\")\ndef cli_project_create(*, global_parameters: GlobalParameters | None = None) -&gt; None:\n    \"\"\"Create new AIMBAT project.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _create_project()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.project.cli_project_delete","title":"cli_project_delete","text":"<pre><code>cli_project_delete(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Delete project (note: this does not delete seismogram files).</p> Source code in <code>aimbat/cli/project.py</code> <pre><code>@app.command(name=\"delete\")\ndef cli_project_delete(*, global_parameters: GlobalParameters | None = None) -&gt; None:\n    \"\"\"Delete project (note: this does *not* delete seismogram files).\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _delete_project()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.project.cli_project_info","title":"cli_project_info","text":"<pre><code>cli_project_info(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Show information on an exisiting project.</p> Source code in <code>aimbat/cli/project.py</code> <pre><code>@app.command(name=\"info\")\ndef cli_project_info(*, global_parameters: GlobalParameters | None = None) -&gt; None:\n    \"\"\"Show information on an exisiting project.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _print_project_info()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram","title":"seismogram","text":"<p>View and manage seismograms in the AIMBAT project.</p> <p>Functions:</p> Name Description <code>cli_seismogram_delete</code> <p>Delete existing seismogram.</p> <code>cli_seismogram_dump</code> <p>Dump the contents of the AIMBAT seismogram table to json.</p> <code>cli_seismogram_get</code> <p>Get the value of a processing parameter.</p> <code>cli_seismogram_list</code> <p>Print information on the seismograms in the active event.</p> <code>cli_seismogram_plot</code> <p>Plot seismograms for the active event.</p> <code>cli_seismogram_set</code> <p>Set value of a processing parameter.</p>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_delete","title":"cli_seismogram_delete","text":"<pre><code>cli_seismogram_delete(\n    seismogram_id: Annotated[\n        UUID | str, Parameter(name=id)\n    ],\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Delete existing seismogram.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Seismogram ID.</p> required Source code in <code>aimbat/cli/seismogram.py</code> <pre><code>@app.command(name=\"delete\")\ndef cli_seismogram_delete(\n    seismogram_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Delete existing seismogram.\n\n    Parameters:\n        seismogram_id: Seismogram ID.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _delete_seismogram(\n        seismogram_id=seismogram_id,\n    )\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_delete(seismogram_id)","title":"<code>seismogram_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_dump","title":"cli_seismogram_dump","text":"<pre><code>cli_seismogram_dump(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Dump the contents of the AIMBAT seismogram table to json.</p> Source code in <code>aimbat/cli/seismogram.py</code> <pre><code>@app.command(name=\"dump\")\ndef cli_seismogram_dump(\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Dump the contents of the AIMBAT seismogram table to json.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _dump_seismogram_table()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_get","title":"cli_seismogram_get","text":"<pre><code>cli_seismogram_get(\n    seismogram_id: Annotated[\n        UUID | str, Parameter(name=id)\n    ],\n    name: SeismogramParameter,\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Get the value of a processing parameter.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Seismogram ID number.</p> required <code>SeismogramParameter</code> <p>Name of the seismogram parameter.</p> required Source code in <code>aimbat/cli/seismogram.py</code> <pre><code>@app.command(name=\"get\")\ndef cli_seismogram_get(\n    seismogram_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    name: SeismogramParameter,\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Get the value of a processing parameter.\n\n    Parameters:\n        seismogram_id: Seismogram ID number.\n        name: Name of the seismogram parameter.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _get_seismogram_parameter(\n        seismogram_id=seismogram_id,\n        name=name,\n    )\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_get(seismogram_id)","title":"<code>seismogram_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_get(name)","title":"<code>name</code>","text":""},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_list","title":"cli_seismogram_list","text":"<pre><code>cli_seismogram_list(\n    *,\n    all_events: Annotated[bool, Parameter(all)] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Print information on the seismograms in the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[bool, Parameter(all)]</code> <p>Select seismograms for all events.</p> <code>False</code> Source code in <code>aimbat/cli/seismogram.py</code> <pre><code>@app.command(name=\"list\")\ndef cli_seismogram_list(\n    *,\n    all_events: Annotated[bool, Parameter(\"all\")] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Print information on the seismograms in the active event.\n\n    Parameters:\n        all_events: Select seismograms for all events.\"\"\"\n\n    table_parameters = table_parameters or TableParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _print_seismogram_table(table_parameters.short, all_events)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_list(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_plot","title":"cli_seismogram_plot","text":"<pre><code>cli_seismogram_plot(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Plot seismograms for the active event.</p> Source code in <code>aimbat/cli/seismogram.py</code> <pre><code>@app.command(name=\"plot\")\ndef cli_seismogram_plot(*, global_parameters: GlobalParameters | None = None) -&gt; None:\n    \"\"\"Plot seismograms for the active event.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _plot_seismograms(global_parameters.use_qt)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_set","title":"cli_seismogram_set","text":"<pre><code>cli_seismogram_set(\n    seismogram_id: Annotated[\n        UUID | str, Parameter(name=id)\n    ],\n    name: SeismogramParameter,\n    value: str,\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Set value of a processing parameter.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Seismogram ID number.</p> required <code>SeismogramParameter</code> <p>Name of the seismogram parameter.</p> required <code>str</code> <p>Value of the seismogram parameter.</p> required Source code in <code>aimbat/cli/seismogram.py</code> <pre><code>@app.command(name=\"set\")\ndef cli_seismogram_set(\n    seismogram_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    name: SeismogramParameter,\n    value: str,\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Set value of a processing parameter.\n\n    Parameters:\n        seismogram_id: Seismogram ID number.\n        name: Name of the seismogram parameter.\n        value: Value of the seismogram parameter.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _set_seismogram_parameter(\n        seismogram_id=seismogram_id,\n        name=name,\n        value=value,\n    )\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_set(seismogram_id)","title":"<code>seismogram_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_set(name)","title":"<code>name</code>","text":""},{"location":"reference/cli/#aimbat.cli.seismogram.cli_seismogram_set(value)","title":"<code>value</code>","text":""},{"location":"reference/cli/#aimbat.cli.snapshot","title":"snapshot","text":"<p>View and manage snapshots.</p> <p>Functions:</p> Name Description <code>cli_snapshop_delete</code> <p>Delete existing snapshot.</p> <code>cli_snapshot_create</code> <p>Create new snapshot.</p> <code>cli_snapshot_list</code> <p>Print information on the snapshots for the active event.</p> <code>cli_snapshot_rollback</code> <p>Rollback to snapshot.</p>"},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshop_delete","title":"cli_snapshop_delete","text":"<pre><code>cli_snapshop_delete(\n    snapshot_id: Annotated[UUID | str, Parameter(name=id)],\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Delete existing snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Snapshot ID Number.</p> required Source code in <code>aimbat/cli/snapshot.py</code> <pre><code>@app.command(name=\"delete\")\ndef cli_snapshop_delete(\n    snapshot_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Delete existing snapshot.\n\n    Parameters:\n        snapshot_id: Snapshot ID Number.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _delete_snapshot(snapshot_id)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshop_delete(snapshot_id)","title":"<code>snapshot_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshot_create","title":"cli_snapshot_create","text":"<pre><code>cli_snapshot_create(\n    comment: str | None = None,\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Create new snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>str | None</code> <p>Create snapshot with optional comment.</p> <code>None</code> Source code in <code>aimbat/cli/snapshot.py</code> <pre><code>@app.command(name=\"create\")\ndef cli_snapshot_create(\n    comment: str | None = None, *, global_parameters: GlobalParameters | None = None\n) -&gt; None:\n    \"\"\"Create new snapshot.\n\n    Parameters:\n        comment: Create snapshot with optional comment.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _create_snapshot(comment=comment)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshot_create(comment)","title":"<code>comment</code>","text":""},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshot_list","title":"cli_snapshot_list","text":"<pre><code>cli_snapshot_list(\n    *,\n    all_events: Annotated[bool, Parameter(all)] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Print information on the snapshots for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[bool, Parameter(all)]</code> <p>Select snapshots for all events.</p> <code>False</code> Source code in <code>aimbat/cli/snapshot.py</code> <pre><code>@app.command(name=\"list\")\ndef cli_snapshot_list(\n    *,\n    all_events: Annotated[bool, Parameter(\"all\")] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Print information on the snapshots for the active event.\n\n    Parameters:\n        all_events: Select snapshots for all events.\n    \"\"\"\n\n    table_parameters = table_parameters or TableParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _print_snapshot_table(table_parameters.short, all_events)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshot_list(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshot_rollback","title":"cli_snapshot_rollback","text":"<pre><code>cli_snapshot_rollback(\n    snapshot_id: Annotated[UUID | str, Parameter(name=id)],\n    *,\n    global_paramaters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Rollback to snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Snapshot ID Number.</p> required Source code in <code>aimbat/cli/snapshot.py</code> <pre><code>@app.command(name=\"rollback\")\ndef cli_snapshot_rollback(\n    snapshot_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    *,\n    global_paramaters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Rollback to snapshot.\n\n    Parameters:\n        snapshot_id: Snapshot ID Number.\n    \"\"\"\n\n    global_paramaters = global_paramaters or GlobalParameters()\n\n    _rollback_to_snapshot(snapshot_id)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.snapshot.cli_snapshot_rollback(snapshot_id)","title":"<code>snapshot_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.station","title":"station","text":"<p>View and manage stations.</p> <p>Functions:</p> Name Description <code>cli_station_delete</code> <p>Delete existing station.</p> <code>cli_station_dump</code> <p>Dump the contents of the AIMBAT station table to json.</p> <code>cli_station_list</code> <p>Print information on the stations used in the active event.</p>"},{"location":"reference/cli/#aimbat.cli.station.cli_station_delete","title":"cli_station_delete","text":"<pre><code>cli_station_delete(\n    station_id: Annotated[UUID | str, Parameter(name=id)],\n    *,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Delete existing station.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[UUID | str, Parameter(name=id)]</code> <p>Station ID.</p> required Source code in <code>aimbat/cli/station.py</code> <pre><code>@app.command(name=\"delete\")\ndef cli_station_delete(\n    station_id: Annotated[uuid.UUID | str, Parameter(name=\"id\")],\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Delete existing station.\n\n    Parameters:\n        station_id: Station ID.\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _delete_station(station_id=station_id)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.station.cli_station_delete(station_id)","title":"<code>station_id</code>","text":""},{"location":"reference/cli/#aimbat.cli.station.cli_station_dump","title":"cli_station_dump","text":"<pre><code>cli_station_dump(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Dump the contents of the AIMBAT station table to json.</p> Source code in <code>aimbat/cli/station.py</code> <pre><code>@app.command(name=\"dump\")\ndef cli_station_dump(\n    *,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Dump the contents of the AIMBAT station table to json.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _dump_station_table()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.station.cli_station_list","title":"cli_station_list","text":"<pre><code>cli_station_list(\n    *,\n    all_events: Annotated[\n        bool, Parameter(name=all)\n    ] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Print information on the stations used in the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[bool, Parameter(name=all)]</code> <p>Select stations for all events.</p> <code>False</code> Source code in <code>aimbat/cli/station.py</code> <pre><code>@app.command(name=\"list\")\ndef cli_station_list(\n    *,\n    all_events: Annotated[bool, Parameter(name=\"all\")] = False,\n    table_parameters: TableParameters | None = None,\n    global_parameters: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Print information on the stations used in the active event.\n\n    Parameters:\n        all_events: Select stations for all events.\n    \"\"\"\n\n    table_parameters = table_parameters or TableParameters()\n    global_parameters = global_parameters or GlobalParameters()\n\n    _print_station_table(table_parameters.short, all_events)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.station.cli_station_list(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/cli/#aimbat.cli.utils","title":"utils","text":"<p>Utilities for AIMBAT.</p> <p>Modules:</p> Name Description <code>app</code> <p>Utilities for AIMBAT.</p> <code>sampledata</code> <p>Download or delete AIMBAT sample data.</p>"},{"location":"reference/cli/#aimbat.cli.utils.app","title":"app","text":"<p>Utilities for AIMBAT.</p> <p>The utils subcommand contains useful tools that are not strictly part of an AIMBAT workflow.</p> <p>Functions:</p> Name Description <code>cli_checkdata</code> <p>Check if there are any problems with SAC files before adding them to a project.</p>"},{"location":"reference/cli/#aimbat.cli.utils.app.cli_checkdata","title":"cli_checkdata","text":"<pre><code>cli_checkdata(\n    sacfiles: Annotated[\n        list[Path],\n        Parameter(name=data, consume_multiple=True),\n    ],\n    *,\n    common: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Check if there are any problems with SAC files before adding them to a project.</p> <p>Parameters:</p> Name Type Description Default <code>Annotated[list[Path], Parameter(name=data, consume_multiple=True)]</code> <p>One or more SAC files.</p> required Source code in <code>aimbat/cli/utils/app.py</code> <pre><code>@app.command(name=\"checkdata\")\ndef cli_checkdata(\n    sacfiles: Annotated[list[Path], Parameter(name=\"data\", consume_multiple=True)],\n    *,\n    common: GlobalParameters | None = None,\n) -&gt; None:\n    \"\"\"Check if there are any problems with SAC files before adding them to a project.\n\n    Parameters:\n        sacfiles: One or more SAC files.\n    \"\"\"\n\n    common = common or GlobalParameters()\n\n    _run_checks(sacfiles)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.utils.app.cli_checkdata(sacfiles)","title":"<code>sacfiles</code>","text":""},{"location":"reference/cli/#aimbat.cli.utils.sampledata","title":"sampledata","text":"<p>Download or delete AIMBAT sample data.</p> <p>The sampledata subcommand manages an example dataset that can be used for testing or learning how to use AIMBAT.</p> <p>The sample data source url can be viewed or changed via <code>aimbat default &lt;list/set&gt; sampledata_src</code>. Likewise the sample data destination folder be viewed or changed via <code>aimbat default &lt;list/set&gt; sampledata_dir</code>.</p> <p>Functions:</p> Name Description <code>sampledata_cli_delete</code> <p>Recursively delete sample data directory.</p> <code>sampledata_cli_download</code> <p>Download AIMBAT sample data.</p>"},{"location":"reference/cli/#aimbat.cli.utils.sampledata.sampledata_cli_delete","title":"sampledata_cli_delete","text":"<pre><code>sampledata_cli_delete(\n    *, global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Recursively delete sample data directory.</p> Source code in <code>aimbat/cli/utils/sampledata.py</code> <pre><code>@app.command(name=\"delete\")\ndef sampledata_cli_delete(*, global_parameters: GlobalParameters | None = None) -&gt; None:\n    \"\"\"Recursively delete sample data directory.\"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _delete_sampledata()\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.utils.sampledata.sampledata_cli_download","title":"sampledata_cli_download","text":"<pre><code>sampledata_cli_download(\n    *,\n    force: bool = False,\n    global_parameters: GlobalParameters | None = None\n) -&gt; None\n</code></pre> <p>Download AIMBAT sample data.</p> <p>Downloads an example dataset to the directory specified in the <code>sampledata_dir</code> AIMBAT default variable.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Delete the download directory and re-download.\"</p> <code>False</code> Source code in <code>aimbat/cli/utils/sampledata.py</code> <pre><code>@app.command(name=\"download\")\ndef sampledata_cli_download(\n    *, force: bool = False, global_parameters: GlobalParameters | None = None\n) -&gt; None:\n    \"\"\"Download AIMBAT sample data.\n\n    Downloads an example dataset to the directory specified in the\n    `sampledata_dir` AIMBAT default variable.\n\n    Parameters:\n        force: Delete the download directory and re-download.\"\n    \"\"\"\n\n    global_parameters = global_parameters or GlobalParameters()\n\n    _download_sampledata(force)\n</code></pre>"},{"location":"reference/cli/#aimbat.cli.utils.sampledata.sampledata_cli_download(force)","title":"<code>force</code>","text":""},{"location":"reference/lib/","title":"aimbat.lib","text":""},{"location":"reference/lib/#aimbat.lib","title":"aimbat.lib","text":"<p>Modules:</p> Name Description <code>common</code> <p>Common functions for AIMBAT.</p> <code>data</code> <code>db</code> <p>Module to define the AIMBAT project file and create the database engine.</p> <code>event</code> <p>Module to manage and view events in AIMBAT.</p> <code>iccs</code> <p>Processing of data for AIMBAT.</p> <code>io</code> <p>Functions to read and write data files used with AIMBAT</p> <code>models</code> <p>This module defines the \"Aimbat\" classes.</p> <code>project</code> <code>seismogram</code> <code>snapshot</code> <code>station</code> <code>typing</code> <p>Custom types used in AIMBAT.</p> <code>utils</code>"},{"location":"reference/lib/#aimbat.lib.common","title":"common","text":"<p>Common functions for AIMBAT.</p> <p>Classes:</p> Name Description <code>CliHints</code> <p>Hints for error messages.</p> <code>TableStyling</code> <p>This class is to set the colour of the table columns and elements.</p> <p>Functions:</p> Name Description <code>check_for_notebook</code> <p>Check if we ware running inside a jupyter notebook.</p> <code>string_to_uuid</code> <p>Determine a UUID from a string containing the first few characters.</p>"},{"location":"reference/lib/#aimbat.lib.common.CliHints","title":"CliHints  <code>dataclass</code>","text":"<p>Hints for error messages.</p> Source code in <code>aimbat/lib/common.py</code> <pre><code>@dataclass\nclass CliHints:\n    \"\"\"Hints for error messages.\"\"\"\n\n    ACTIVATE_EVENT = \"Hint: activate an event with `aimbat event activate &lt;EVENT_ID&gt;`.\"\n    LIST_EVENTS = \"Hint: view available events with `aimbat event list`.\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.common.TableStyling","title":"TableStyling  <code>dataclass</code>","text":"<p>This class is to set the colour of the table columns and elements.</p> Source code in <code>aimbat/lib/common.py</code> <pre><code>@dataclass\nclass TableStyling:\n    \"\"\"This class is to set the colour of the table columns and elements.\"\"\"\n\n    id: str = \"bright_blue\"\n    mine: str = \"cyan\"\n    linked: str = \"magenta\"\n    parameters: str = \"green\"\n\n    @staticmethod\n    def bool_formatter(true_or_false: bool | Any) -&gt; str:\n        if true_or_false is True:\n            return \"[bold green]:heavy_check_mark:[/]\"\n        elif true_or_false is False:\n            return \"[bold red]:heavy_multiplication_x:[/]\"\n        return true_or_false\n\n    @staticmethod\n    def datetime_formatter(dt: datetime, short: bool) -&gt; str:\n        if short:\n            return dt.strftime(\"%Y-%m-%d [light_sea_green]%H:%M:%S[/]\")\n        return str(dt)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.common.check_for_notebook","title":"check_for_notebook","text":"<pre><code>check_for_notebook() -&gt; bool\n</code></pre> <p>Check if we ware running inside a jupyter notebook.</p> Source code in <code>aimbat/lib/common.py</code> <pre><code>def check_for_notebook() -&gt; bool:\n    \"\"\"Check if we ware running inside a jupyter notebook.\"\"\"\n    import IPython.core.getipython as getipython\n\n    try:\n        shell = getipython.get_ipython().__class__.__name__\n        if shell == \"ZMQInteractiveShell\":\n            return True  # Jupyter notebook or qtconsole\n        elif shell == \"TerminalInteractiveShell\":\n            return False  # Terminal running IPython\n        else:\n            return False  # Other type (?)\n    except NameError:\n        return False  # Probably standard Python interpreter\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.common.string_to_uuid","title":"string_to_uuid","text":"<pre><code>string_to_uuid(\n    session: Session,\n    id: str,\n    aimbat_class: type[\n        AimbatDataSource\n        | AimbatStation\n        | AimbatEvent\n        | AimbatEventParameters\n        | AimbatSeismogram\n        | AimbatSeismogramParameters\n        | AimbatSnapshot\n        | AimbatEventParametersSnapshot\n        | AimbatSeismogramParametersSnapshot\n    ],\n    custom_error: str | None = None,\n) -&gt; UUID\n</code></pre> <p>Determine a UUID from a string containing the first few characters.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>str</code> <p>Input string to find UUID for.</p> required <code>type[AimbatDataSource | AimbatStation | AimbatEvent | AimbatEventParameters | AimbatSeismogram | AimbatSeismogramParameters | AimbatSnapshot | AimbatEventParametersSnapshot | AimbatSeismogramParametersSnapshot]</code> <p>Aimbat class to use to find UUID.</p> required <code>str | None</code> <p>Overrides the default error message.</p> <code>None</code> <p>Returns:</p> Type Description <code>UUID</code> <p>The full UUID.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the UUID could not be determined.</p> Source code in <code>aimbat/lib/common.py</code> <pre><code>def string_to_uuid(\n    session: Session,\n    id: str,\n    aimbat_class: type[\n        AimbatDataSource\n        | AimbatStation\n        | AimbatEvent\n        | AimbatEventParameters\n        | AimbatSeismogram\n        | AimbatSeismogramParameters\n        | AimbatSnapshot\n        | AimbatEventParametersSnapshot\n        | AimbatSeismogramParametersSnapshot\n    ],\n    custom_error: str | None = None,\n) -&gt; UUID:\n    \"\"\"Determine a UUID from a string containing the first few characters.\n\n    Parameters:\n        session: Database session.\n        id: Input string to find UUID for.\n        aimbat_class: Aimbat class to use to find UUID.\n        custom_error: Overrides the default error message.\n\n    Returns:\n        The full UUID.\n\n    Raises:\n        ValueError: If the UUID could not be determined.\n    \"\"\"\n    uuid_set = {\n        u for u in session.exec(select(aimbat_class.id)).all() if str(u).startswith(id)\n    }\n    if len(uuid_set) == 1:\n        return uuid_set.pop()\n    if len(uuid_set) == 0:\n        raise ValueError(\n            custom_error or f\"Unable to find {aimbat_class.__name__} using id: {id}.\"\n        )\n    raise ValueError(f\"Found more than one {aimbat_class.__name__} using id: {id}\")\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.common.string_to_uuid(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.common.string_to_uuid(id)","title":"<code>id</code>","text":""},{"location":"reference/lib/#aimbat.lib.common.string_to_uuid(aimbat_class)","title":"<code>aimbat_class</code>","text":""},{"location":"reference/lib/#aimbat.lib.common.string_to_uuid(custom_error)","title":"<code>custom_error</code>","text":""},{"location":"reference/lib/#aimbat.lib.data","title":"data","text":"<p>Functions:</p> Name Description <code>add_files_to_project</code> <p>Add files to the AIMBAT database.</p> <code>dump_data_table</code> <p>Dump the table data to json.</p> <code>get_data_for_active_event</code> <p>Returns the AimbatFiles belonging to the active event.</p> <code>print_data_table</code> <p>Print a pretty table with AIMBAT data.</p>"},{"location":"reference/lib/#aimbat.lib.data.add_files_to_project","title":"add_files_to_project","text":"<pre><code>add_files_to_project(\n    datasources: Sequence[str | PathLike],\n    datatype: DataType,\n    disable_progress_bar: bool = True,\n) -&gt; None\n</code></pre> <p>Add files to the AIMBAT database.</p> <p>Parameters:</p> Name Type Description Default <code>Sequence[str | PathLike]</code> <p>List of data sources to add.</p> required <code>DataType</code> <p>Type of data.</p> required <code>bool</code> <p>Do not display progress bar.</p> <code>True</code> Source code in <code>aimbat/lib/data.py</code> <pre><code>def add_files_to_project(\n    datasources: Sequence[str | os.PathLike],\n    datatype: DataType,\n    disable_progress_bar: bool = True,\n) -&gt; None:\n    \"\"\"Add files to the AIMBAT database.\n\n    Parameters:\n        datasources: List of data sources to add.\n        datatype: Type of data.\n        disable_progress_bar: Do not display progress bar.\n    \"\"\"\n\n    logger.info(f\"Adding {len(datasources)} {datatype} files to project.\")\n\n    with Session(engine) as session:\n        for datasource in track(\n            sequence=datasources,\n            description=\"Adding files ...\",\n            disable=disable_progress_bar,\n        ):\n            aimbat_station = _create_station(session, datasource, datatype)\n            aimbat_event = _create_event(session, datasource, datatype)\n            aimbat_seismogram = _create_seismogram(session, datasource, datatype)\n\n            # TODO: perhaps adding potentially updated station and event information should be optional?\n            aimbat_seismogram.station = aimbat_station\n            aimbat_seismogram.event = aimbat_event\n\n            # Create AimbatDataSource instance with relationship to AimbatSeismogram\n            select_aimbat_data_source = select(AimbatDataSource).where(\n                AimbatDataSource.sourcename == str(datasource)\n            )\n            aimbat_data_source = session.exec(select_aimbat_data_source).one_or_none()\n            if aimbat_data_source is None:\n                logger.debug(f\"Adding data source {datasource} to project.\")\n                aimbat_data_source_create = AimbatDataSourceCreate(\n                    sourcename=str(datasource), datatype=datatype\n                )\n                aimbat_data_source = AimbatDataSource.model_validate(\n                    aimbat_data_source_create, update={\"seismogram\": aimbat_seismogram}\n                )\n\n            else:\n                logger.debug(\n                    f\"Using existing data source {datasource} instead of adding new one.\"\n                )\n                aimbat_data_source.seismogram = aimbat_seismogram\n            session.add(aimbat_data_source)\n\n        session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.data.add_files_to_project(datasources)","title":"<code>datasources</code>","text":""},{"location":"reference/lib/#aimbat.lib.data.add_files_to_project(datatype)","title":"<code>datatype</code>","text":""},{"location":"reference/lib/#aimbat.lib.data.add_files_to_project(disable_progress_bar)","title":"<code>disable_progress_bar</code>","text":""},{"location":"reference/lib/#aimbat.lib.data.dump_data_table","title":"dump_data_table","text":"<pre><code>dump_data_table() -&gt; None\n</code></pre> <p>Dump the table data to json.</p> Source code in <code>aimbat/lib/data.py</code> <pre><code>def dump_data_table() -&gt; None:\n    \"\"\"Dump the table data to json.\"\"\"\n\n    logger.info(\"Dumping AIMBAT datasources table to json.\")\n\n    with Session(engine) as session:\n        aimbat_data_sources = session.exec(select(AimbatDataSource)).all()\n        dump_to_json(aimbat_data_sources)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.data.get_data_for_active_event","title":"get_data_for_active_event","text":"<pre><code>get_data_for_active_event(\n    session: Session,\n) -&gt; Sequence[AimbatDataSource]\n</code></pre> <p>Returns the AimbatFiles belonging to the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <p>Returns:</p> Type Description <code>Sequence[AimbatDataSource]</code> <p>List of AimbatFiles.</p> Source code in <code>aimbat/lib/data.py</code> <pre><code>def get_data_for_active_event(session: Session) -&gt; Sequence[AimbatDataSource]:\n    \"\"\"Returns the AimbatFiles belonging to the active event.\n\n    Parameters:\n        session: Database session.\n\n    Returns:\n        List of AimbatFiles.\n    \"\"\"\n\n    logger.info(\"Getting aimbatfiles in active event.\")\n\n    select_files = (\n        select(AimbatDataSource)\n        .join(AimbatSeismogram)\n        .join(AimbatEvent)\n        .where(AimbatEvent.active == 1)\n    )\n    return session.exec(select_files).all()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.data.get_data_for_active_event(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.data.print_data_table","title":"print_data_table","text":"<pre><code>print_data_table(\n    short: bool, all_events: bool = False\n) -&gt; None\n</code></pre> <p>Print a pretty table with AIMBAT data.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Shorten UUIDs and format data.</p> required <code>bool</code> <p>Print all files instead of limiting to the active event.</p> <code>False</code> Source code in <code>aimbat/lib/data.py</code> <pre><code>def print_data_table(short: bool, all_events: bool = False) -&gt; None:\n    \"\"\"Print a pretty table with AIMBAT data.\n\n    Parameters:\n        short: Shorten UUIDs and format data.\n        all_events: Print all files instead of limiting to the active event.\n    \"\"\"\n\n    logger.info(\"Printing AIMBAT data table.\")\n\n    with Session(engine) as session:\n        if all_events:\n            aimbat_data_sources = session.exec(select(AimbatDataSource)).all()\n            title = \"AIMBAT data for all events\"\n        else:\n            active_event = get_active_event(session)\n            aimbat_data_sources = get_data_for_active_event(session)\n            time = (\n                active_event.time.strftime(\"%Y-%m-%d %H:%M:%S\")\n                if short\n                else active_event.time\n            )\n            id = uuid_shortener(session, active_event) if short else active_event.id\n            title = f\"AIMBAT data for event {time} (ID={id})\"\n\n        logger.debug(f\"Found {len(aimbat_data_sources)} files in total.\")\n\n        rows = [\n            [\n                uuid_shortener(session, a) if short else str(a.id),\n                str(a.datatype),\n                str(a.sourcename),\n                (\n                    uuid_shortener(session, a.seismogram)\n                    if short\n                    else str(a.seismogram.id)\n                ),\n            ]\n            for a in aimbat_data_sources\n        ]\n\n        table = make_table(title=title)\n\n        table.add_column(\n            \"ID (shortened)\" if short else \"ID\",\n            justify=\"center\",\n            style=TABLE_STYLING.id,\n            no_wrap=True,\n        )\n        table.add_column(\"Datatype\", justify=\"center\", style=TABLE_STYLING.mine)\n        table.add_column(\n            \"Filename\", justify=\"left\", style=TABLE_STYLING.mine, no_wrap=True\n        )\n        table.add_column(\n            \"Seismogram ID\", justify=\"center\", style=TABLE_STYLING.linked, no_wrap=True\n        )\n\n        for row in rows:\n            table.add_row(*row)\n\n        console = Console()\n        console.print(table)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.data.print_data_table(short)","title":"<code>short</code>","text":""},{"location":"reference/lib/#aimbat.lib.data.print_data_table(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/lib/#aimbat.lib.db","title":"db","text":"<p>Module to define the AIMBAT project file and create the database engine.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>AIMBAT database engine.</p>"},{"location":"reference/lib/#aimbat.lib.db.engine","title":"engine  <code>module-attribute</code>","text":"<pre><code>engine = create_engine(url=db_url, echo=False)\n</code></pre> <p>AIMBAT database engine.</p>"},{"location":"reference/lib/#aimbat.lib.event","title":"event","text":"<p>Module to manage and view events in AIMBAT.</p> <p>Functions:</p> Name Description <code>delete_event</code> <p>Delete an AimbatEvent from the database.</p> <code>delete_event_by_id</code> <p>Delete an AimbatEvent from the database by ID.</p> <code>dump_event_table</code> <p>Dump the table data to json.</p> <code>get_active_event</code> <p>Return the currently active event (i.e. the one being processed).</p> <code>get_completed_events</code> <p>Get the events marked as completed.</p> <code>get_event_parameter</code> <p>Get event parameter value for the active event.</p> <code>get_events_using_station</code> <p>Get all events that use a particular station.</p> <code>print_event_table</code> <p>Print a pretty table with AIMBAT events.</p> <code>set_active_event</code> <p>Set the active event (i.e. the one being processed).</p> <code>set_active_event_by_id</code> <p>Set the currently selected event (i.e. the one being processed) by its ID.</p> <code>set_event_parameter</code> <p>Set event parameter value for the active event.</p>"},{"location":"reference/lib/#aimbat.lib.event.delete_event","title":"delete_event","text":"<pre><code>delete_event(session: Session, event: AimbatEvent) -&gt; None\n</code></pre> <p>Delete an AimbatEvent from the database.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>AimbatEvent</code> <p>Event to delete.</p> required Source code in <code>aimbat/lib/event.py</code> <pre><code>def delete_event(session: Session, event: AimbatEvent) -&gt; None:\n    \"\"\"Delete an AimbatEvent from the database.\n\n    Parameters:\n        session: Database session.\n        event: Event to delete.\n    \"\"\"\n\n    logger.info(f\"Deleting event {event.id}.\")\n\n    session.delete(event)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.delete_event(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.delete_event(event)","title":"<code>event</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.delete_event_by_id","title":"delete_event_by_id","text":"<pre><code>delete_event_by_id(\n    session: Session, event_id: UUID\n) -&gt; None\n</code></pre> <p>Delete an AimbatEvent from the database by ID.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>UUID</code> <p>Event ID.</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>If no AimbatEvent is found with the given ID.</p> Source code in <code>aimbat/lib/event.py</code> <pre><code>def delete_event_by_id(session: Session, event_id: UUID) -&gt; None:\n    \"\"\"Delete an AimbatEvent from the database by ID.\n\n    Parameters:\n        session: Database session.\n        event_id: Event ID.\n\n    Raises:\n        NoResultFound: If no AimbatEvent is found with the given ID.\n    \"\"\"\n\n    logger.debug(f\"Getting event with id={event_id}.\")\n\n    event = session.get(AimbatEvent, event_id)\n    if event is None:\n        raise NoResultFound(\n            f\"Unable to find event using id: {event_id}. {HINTS.LIST_EVENTS}\"\n        )\n    delete_event(session, event)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.delete_event_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.delete_event_by_id(event_id)","title":"<code>event_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.dump_event_table","title":"dump_event_table","text":"<pre><code>dump_event_table() -&gt; None\n</code></pre> <p>Dump the table data to json.</p> Source code in <code>aimbat/lib/event.py</code> <pre><code>def dump_event_table() -&gt; None:\n    \"\"\"Dump the table data to json.\"\"\"\n\n    logger.info(\"Dumping AIMBAT event table to json.\")\n\n    with Session(engine) as session:\n        aimbat_events = session.exec(select(AimbatEvent)).all()\n        dump_to_json(aimbat_events)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.get_active_event","title":"get_active_event","text":"<pre><code>get_active_event(session: Session) -&gt; AimbatEvent\n</code></pre> <p>Return the currently active event (i.e. the one being processed).</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>SQL session.</p> required <p>Returns:</p> Type Description <code>AimbatEvent</code> <p>Active Event</p> <p>Raises     NoResultFound: When no event is active.</p> Source code in <code>aimbat/lib/event.py</code> <pre><code>def get_active_event(session: Session) -&gt; AimbatEvent:\n    \"\"\"\n    Return the currently active event (i.e. the one being processed).\n\n    Parameters:\n        session: SQL session.\n\n    Returns:\n        Active Event\n\n    Raises\n        NoResultFound: When no event is active.\n    \"\"\"\n\n    logger.debug(\"Attempting to determine active event.\")\n\n    select_active_event = select(AimbatEvent).where(AimbatEvent.active == 1)\n\n    # NOTE: While there technically can be no active event in the database,\n    # we typically don't really want to go beyond this point when that is the\n    # case. Hence we call `one` rather than `one_or_none`.\n    try:\n        active_event = session.exec(select_active_event).one()\n    except NoResultFound:\n        raise NoResultFound(f\"No active event found. {HINTS.ACTIVATE_EVENT}\")\n\n    logger.debug(f\"Active event: {active_event.id}\")\n\n    return active_event\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.get_active_event(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.get_completed_events","title":"get_completed_events","text":"<pre><code>get_completed_events(\n    session: Session,\n) -&gt; Sequence[AimbatEvent]\n</code></pre> <p>Get the events marked as completed.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>SQL session.</p> required Source code in <code>aimbat/lib/event.py</code> <pre><code>def get_completed_events(session: Session) -&gt; Sequence[AimbatEvent]:\n    \"\"\"Get the events marked as completed.\n\n    Parameters:\n        session: SQL session.\n    \"\"\"\n\n    select_completed_events = (\n        select(AimbatEvent)\n        .join(AimbatEventParameters)\n        .where(AimbatEventParameters.completed == 1)\n    )\n\n    return session.exec(select_completed_events).all()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.get_completed_events(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.get_event_parameter","title":"get_event_parameter","text":"<pre><code>get_event_parameter(\n    session: Session, name: EventParameter\n) -&gt; timedelta | bool | float\n</code></pre> <p>Get event parameter value for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>EventParameter</code> <p>Name of the parameter.</p> required Source code in <code>aimbat/lib/event.py</code> <pre><code>def get_event_parameter(\n    session: Session, name: EventParameter\n) -&gt; timedelta | bool | float:\n    \"\"\"Get event parameter value for the active event.\n\n    Parameters:\n        session: Database session.\n        name: Name of the parameter.\n    \"\"\"\n\n    active_event = get_active_event(session)\n\n    logger.info(f\"Getting {name=} value for {active_event=}.\")\n\n    return getattr(active_event.parameters, name)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.get_event_parameter(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.get_event_parameter(name)","title":"<code>name</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.get_events_using_station","title":"get_events_using_station","text":"<pre><code>get_events_using_station(\n    session: Session, station: AimbatStation\n) -&gt; Sequence[AimbatEvent]\n</code></pre> <p>Get all events that use a particular station.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>AimbatStation</code> <p>Station to return events for.</p> required <p>Returns: Events that use the station.</p> Source code in <code>aimbat/lib/event.py</code> <pre><code>def get_events_using_station(\n    session: Session, station: AimbatStation\n) -&gt; Sequence[AimbatEvent]:\n    \"\"\"Get all events that use a particular station.\n\n    Parameters:\n        session: Database session.\n        station: Station to return events for.\n\n    Returns: Events that use the station.\n    \"\"\"\n\n    logger.info(f\"Getting events for station: {station.id}.\")\n\n    select_events = (\n        select(AimbatEvent)\n        .join(AimbatSeismogram)\n        .join(AimbatStation)\n        .where(AimbatStation.id == station.id)\n    )\n\n    events = session.exec(select_events).all()\n\n    logger.debug(f\"Found {len(events)}.\")\n\n    return events\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.get_events_using_station(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.get_events_using_station(station)","title":"<code>station</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.print_event_table","title":"print_event_table","text":"<pre><code>print_event_table(short: bool = True) -&gt; None\n</code></pre> <p>Print a pretty table with AIMBAT events.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Shorten and format the output to be more human-readable.</p> <code>True</code> Source code in <code>aimbat/lib/event.py</code> <pre><code>def print_event_table(short: bool = True) -&gt; None:\n    \"\"\"Print a pretty table with AIMBAT events.\n\n    Parameters:\n        short: Shorten and format the output to be more human-readable.\n    \"\"\"\n\n    logger.info(\"Printing AIMBAT events table.\")\n\n    table = make_table(title=\"AIMBAT Events\")\n    table.add_column(\n        \"ID (shortened)\" if short else \"ID\",\n        justify=\"center\",\n        style=TABLE_STYLING.id,\n        no_wrap=True,\n    )\n    table.add_column(\"Active\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True)\n    table.add_column(\n        \"Date &amp; Time\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True\n    )\n    table.add_column(\"Latitude\", justify=\"center\", style=TABLE_STYLING.mine)\n    table.add_column(\"Longitude\", justify=\"center\", style=TABLE_STYLING.mine)\n    table.add_column(\"Depth\", justify=\"center\", style=TABLE_STYLING.mine)\n    table.add_column(\"Completed\", justify=\"center\", style=TABLE_STYLING.parameters)\n    table.add_column(\"# Seismograms\", justify=\"center\", style=TABLE_STYLING.linked)\n    table.add_column(\"# Stations\", justify=\"center\", style=TABLE_STYLING.linked)\n\n    with Session(engine) as session:\n        for event in session.exec(select(AimbatEvent)).all():\n            logger.debug(f\"Adding event with id={event.id} to the table.\")\n            table.add_row(\n                uuid_shortener(session, event) if short else str(event.id),\n                TABLE_STYLING.bool_formatter(event.active),\n                TABLE_STYLING.datetime_formatter(event.time, short),\n                f\"{event.latitude:.3f}\" if short else str(event.latitude),\n                f\"{event.longitude:.3f}\" if short else str(event.longitude),\n                f\"{event.depth:.0f}\" if short else str(event.depth),\n                TABLE_STYLING.bool_formatter(event.parameters.completed),\n                str(len(event.seismograms)),\n                str(len(station.get_stations_in_event(session, event))),\n            )\n\n    console = Console()\n    console.print(table)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.print_event_table(short)","title":"<code>short</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_active_event","title":"set_active_event","text":"<pre><code>set_active_event(\n    session: Session, event: AimbatEvent\n) -&gt; None\n</code></pre> <p>Set the active event (i.e. the one being processed).</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>SQL session.</p> required <code>AimbatEvent</code> <p>AIMBAT Event to set as active.</p> required Source code in <code>aimbat/lib/event.py</code> <pre><code>def set_active_event(session: Session, event: AimbatEvent) -&gt; None:\n    \"\"\"\n    Set the active event (i.e. the one being processed).\n\n    Parameters:\n        session: SQL session.\n        event: AIMBAT Event to set as active.\n    \"\"\"\n\n    logger.info(f\"Activating {event=}\")\n\n    event.active = True\n    session.add(event)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.set_active_event(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_active_event(event)","title":"<code>event</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_active_event_by_id","title":"set_active_event_by_id","text":"<pre><code>set_active_event_by_id(\n    session: Session, event_id: UUID\n) -&gt; None\n</code></pre> <p>Set the currently selected event (i.e. the one being processed) by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>SQL session.</p> required <p>ID of AIMBAT Event to set as active one.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If no event with the given ID is found.</p> Source code in <code>aimbat/lib/event.py</code> <pre><code>def set_active_event_by_id(session: Session, event_id: UUID) -&gt; None:\n    \"\"\"\n    Set the currently selected event (i.e. the one being processed) by its ID.\n\n    Parameters:\n        session: SQL session.\n        id: ID of AIMBAT Event to set as active one.\n\n    Raises:\n        ValueError: If no event with the given ID is found.\n    \"\"\"\n    logger.info(f\"Setting active event to event with id={event_id}.\")\n\n    if event_id not in session.exec(select(AimbatEvent.id)).all():\n        raise ValueError(\n            f\"No AimbatEvent found with id: {event_id}. {HINTS.LIST_EVENTS}\"\n        )\n\n    aimbat_event = session.exec(\n        select(AimbatEvent).where(AimbatEvent.id == event_id)\n    ).one()\n    set_active_event(session, aimbat_event)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.set_active_event_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_active_event_by_id(id)","title":"<code>id</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_event_parameter","title":"set_event_parameter","text":"<pre><code>set_event_parameter(\n    session: Session,\n    name: EventParameter,\n    value: timedelta | bool | float | str,\n) -&gt; None\n</code></pre> <p>Set event parameter value for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>EventParameter</code> <p>Name of the parameter.</p> required <code>timedelta | bool | float | str</code> <p>Value to set.</p> required Source code in <code>aimbat/lib/event.py</code> <pre><code>def set_event_parameter(\n    session: Session, name: EventParameter, value: timedelta | bool | float | str\n) -&gt; None:\n    \"\"\"Set event parameter value for the active event.\n\n    Parameters:\n        session: Database session.\n        name: Name of the parameter.\n        value: Value to set.\n    \"\"\"\n\n    active_event = get_active_event(session)\n\n    logger.info(f\"Setting {name=} to {value} for {active_event=}.\")\n\n    parameters = AimbatEventParametersBase.model_validate(\n        active_event.parameters, update={name: value}\n    )\n    setattr(active_event.parameters, name, getattr(parameters, name))\n    session.add(active_event)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.event.set_event_parameter(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_event_parameter(name)","title":"<code>name</code>","text":""},{"location":"reference/lib/#aimbat.lib.event.set_event_parameter(value)","title":"<code>value</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs","title":"iccs","text":"<p>Processing of data for AIMBAT.</p> <p>Functions:</p> Name Description <code>create_iccs_instance</code> <p>Create an ICCS instance for the active event.</p> <code>plot_seismograms</code> <p>Plot the ICCS seismograms as an image.</p> <code>plot_stack</code> <p>Plot the ICCS stack.</p> <code>run_iccs</code> <p>Run ICCS algorithm.</p> <code>update_min_ccnorm</code> <p>Update the minimum cross correlation coefficient for the active event.</p> <code>update_pick</code> <p>Update the pick for the active event.</p> <code>update_timewindow</code> <p>Update the time window for the active event.</p>"},{"location":"reference/lib/#aimbat.lib.iccs.create_iccs_instance","title":"create_iccs_instance","text":"<pre><code>create_iccs_instance(session: Session) -&gt; ICCS\n</code></pre> <p>Create an ICCS instance for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <p>Returns:</p> Type Description <code>ICCS</code> <p>ICCS instance.</p> Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def create_iccs_instance(session: Session) -&gt; ICCS:\n    \"\"\"Create an ICCS instance for the active event.\n\n    Parameters:\n        session: Database session.\n\n    Returns:\n        ICCS instance.\n    \"\"\"\n\n    logger.info(\"Creating ICCS instance for active event.\")\n\n    active_event = event.get_active_event(session)\n\n    return ICCS(\n        seismograms=active_event.seismograms,\n        window_pre=active_event.parameters.window_pre,\n        window_post=active_event.parameters.window_post,\n        min_ccnorm=active_event.parameters.min_ccnorm,\n        plot_padding=settings.window_padding,\n    )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.create_iccs_instance(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.plot_seismograms","title":"plot_seismograms","text":"<pre><code>plot_seismograms(\n    iccs: ICCS, padded: bool, all: bool\n) -&gt; None\n</code></pre> <p>Plot the ICCS seismograms as an image.</p> <p>Parameters:</p> Name Type Description Default <code>ICCS</code> <p>ICCS instance.</p> required <code>bool</code> <p>Whether to pad the seismograms.</p> required <code>bool</code> <p>Whether to plot all seismograms.</p> required Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def plot_seismograms(iccs: ICCS, padded: bool, all: bool) -&gt; None:\n    \"\"\"Plot the ICCS seismograms as an image.\n\n    Parameters:\n        iccs: ICCS instance.\n        padded: Whether to pad the seismograms.\n        all: Whether to plot all seismograms.\n    \"\"\"\n\n    logger.info(\"Plotting ICCS seismograms for active event.\")\n\n    _plot_seismograms(iccs, padded, all)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.plot_seismograms(iccs)","title":"<code>iccs</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.plot_seismograms(padded)","title":"<code>padded</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.plot_seismograms(all)","title":"<code>all</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.plot_stack","title":"plot_stack","text":"<pre><code>plot_stack(iccs: ICCS, padded: bool, all: bool) -&gt; None\n</code></pre> <p>Plot the ICCS stack.</p> <p>Parameters:</p> Name Type Description Default <code>ICCS</code> <p>ICCS instance.</p> required <code>bool</code> <p>Whether to pad the stack.</p> required <code>bool</code> <p>Whether to plot all seismograms.</p> required Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def plot_stack(iccs: ICCS, padded: bool, all: bool) -&gt; None:\n    \"\"\"Plot the ICCS stack.\n\n    Parameters:\n        iccs: ICCS instance.\n        padded: Whether to pad the stack.\n        all: Whether to plot all seismograms.\n    \"\"\"\n\n    logger.info(\"Plotting ICCS stack for active event.\")\n    _plot_stack(iccs, padded, all)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.plot_stack(iccs)","title":"<code>iccs</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.plot_stack(padded)","title":"<code>padded</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.plot_stack(all)","title":"<code>all</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.run_iccs","title":"run_iccs","text":"<pre><code>run_iccs(\n    session: Session,\n    iccs: ICCS,\n    autoflip: bool,\n    autoselect: bool,\n) -&gt; None\n</code></pre> <p>Run ICCS algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>ICCS</code> <p>ICCS instance.</p> required <code>bool</code> <p>Whether to automatically flip seismograms.</p> required <code>bool</code> <p>Whether to automatically select seismograms.</p> required Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def run_iccs(session: Session, iccs: ICCS, autoflip: bool, autoselect: bool) -&gt; None:\n    \"\"\"Run ICCS algorithm.\n\n    Parameters:\n        session: Database session.\n        iccs: ICCS instance.\n        autoflip: Whether to automatically flip seismograms.\n        autoselect: Whether to automatically select seismograms.\n    \"\"\"\n\n    logger.info(f\"Running ICCS with {autoflip=}, {autoselect=}.\")\n\n    results = iccs(autoflip=autoflip, autoselect=autoselect)\n    logger.info(f\"ICCS {results = }\")\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.run_iccs(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.run_iccs(iccs)","title":"<code>iccs</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.run_iccs(autoflip)","title":"<code>autoflip</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.run_iccs(autoselect)","title":"<code>autoselect</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_min_ccnorm","title":"update_min_ccnorm","text":"<pre><code>update_min_ccnorm(\n    session: Session, iccs: ICCS, padded: bool, all: bool\n) -&gt; None\n</code></pre> <p>Update the minimum cross correlation coefficient for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>ICCS</code> <p>ICCS instance.</p> required <code>bool</code> <p>Whether to pad the seismograms.</p> required <code>bool</code> <p>Whether to plot all seismograms.</p> required Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def update_min_ccnorm(session: Session, iccs: ICCS, padded: bool, all: bool) -&gt; None:\n    \"\"\"Update the minimum cross correlation coefficient for the active event.\n\n    Parameters:\n        iccs: ICCS instance.\n        padded: Whether to pad the seismograms.\n        all: Whether to plot all seismograms.\n    \"\"\"\n\n    logger.info(\"Updating minimum cross correlation coefficient for active event.\")\n\n    logger.debug(f\"Current {iccs.min_ccnorm = }.\")\n    _update_min_ccnorm(iccs, padded, all)\n    logger.debug(f\"Updated {iccs.min_ccnorm = }.\")\n\n    active_event = event.get_active_event(session)\n    active_event.parameters.min_ccnorm = float(iccs.min_ccnorm)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.update_min_ccnorm(iccs)","title":"<code>iccs</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_min_ccnorm(padded)","title":"<code>padded</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_min_ccnorm(all)","title":"<code>all</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_pick","title":"update_pick","text":"<pre><code>update_pick(\n    session: Session,\n    iccs: ICCS,\n    padded: bool,\n    all: bool,\n    use_seismogram_image: bool,\n) -&gt; None\n</code></pre> <p>Update the pick for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>ICCS</code> <p>ICCS instance.</p> required <code>bool</code> <p>Whether to pad the seismograms.</p> required <code>bool</code> <p>Whether to plot all seismograms.</p> required <code>bool</code> <p>Whether to use the seismogram image to update pick.</p> required Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def update_pick(\n    session: Session, iccs: ICCS, padded: bool, all: bool, use_seismogram_image: bool\n) -&gt; None:\n    \"\"\"Update the pick for the active event.\n\n    Parameters:\n        iccs: ICCS instance.\n        padded: Whether to pad the seismograms.\n        all: Whether to plot all seismograms.\n        use_seismogram_image: Whether to use the seismogram image to update pick.\n    \"\"\"\n\n    logger.info(\"Updating pick for active event.\")\n\n    _update_pick(iccs, padded, all, use_seismogram_image)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.update_pick(iccs)","title":"<code>iccs</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_pick(padded)","title":"<code>padded</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_pick(all)","title":"<code>all</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_pick(use_seismogram_image)","title":"<code>use_seismogram_image</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_timewindow","title":"update_timewindow","text":"<pre><code>update_timewindow(\n    session: Session,\n    iccs: ICCS,\n    padded: bool,\n    all: bool,\n    use_seismogram_image: bool,\n) -&gt; None\n</code></pre> <p>Update the time window for the active event.</p> <p>Parameters:</p> Name Type Description Default <code>ICCS</code> <p>ICCS instance.</p> required <code>bool</code> <p>Whether to pad the seismograms.</p> required <code>bool</code> <p>Whether to plot all seismograms.</p> required <code>bool</code> <p>Whether to use the seismogram image to update pick.</p> required Source code in <code>aimbat/lib/iccs.py</code> <pre><code>def update_timewindow(\n    session: Session, iccs: ICCS, padded: bool, all: bool, use_seismogram_image: bool\n) -&gt; None:\n    \"\"\"Update the time window for the active event.\n\n    Parameters:\n        iccs: ICCS instance.\n        padded: Whether to pad the seismograms.\n        all: Whether to plot all seismograms.\n        use_seismogram_image: Whether to use the seismogram image to update pick.\n    \"\"\"\n\n    logger.info(\"Updating time window for active event.\")\n\n    logger.debug(f\"Current {iccs.window_pre = }, {iccs.window_post = }.\")\n    _update_timewindow(iccs, padded, all, use_seismogram_image)\n    logger.debug(f\"Updated {iccs.window_pre = }, {iccs.window_post = }.\")\n\n    active_event = event.get_active_event(session)\n    active_event.parameters.window_pre = iccs.window_pre\n    active_event.parameters.window_post = iccs.window_post\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.iccs.update_timewindow(iccs)","title":"<code>iccs</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_timewindow(padded)","title":"<code>padded</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_timewindow(all)","title":"<code>all</code>","text":""},{"location":"reference/lib/#aimbat.lib.iccs.update_timewindow(use_seismogram_image)","title":"<code>use_seismogram_image</code>","text":""},{"location":"reference/lib/#aimbat.lib.io","title":"io","text":"<p>Functions to read and write data files used with AIMBAT</p> <p>Classes:</p> Name Description <code>DataType</code> <p>Valid AIMBAT data types.</p> <p>Functions:</p> Name Description <code>create_event</code> <p>Read event data from a data source and create an AimbatEvent.</p> <code>create_seismogram</code> <p>Read seismogram data from a data source and create an AimbatSeismogram.</p> <code>create_station</code> <p>Read station data from a data source and create an AimbatStation.</p> <code>read_seismogram_data</code> <p>Read seismogram data from a data source.</p> <code>write_seismogram_data</code> <p>Write seismogram data to a data source.</p>"},{"location":"reference/lib/#aimbat.lib.io.DataType","title":"DataType","text":"<p>               Bases: <code>StrEnum</code></p> <p>Valid AIMBAT data types.</p> Source code in <code>aimbat/lib/io/_io.py</code> <pre><code>class DataType(StrEnum):\n    \"\"\"Valid AIMBAT data types.\"\"\"\n\n    SAC = auto()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.io.create_event","title":"create_event","text":"<pre><code>create_event(\n    datasource: str | PathLike, datatype: DataType\n) -&gt; AimbatEvent\n</code></pre> <p>Read event data from a data source and create an AimbatEvent.</p> <p>Parameters:</p> Name Type Description Default <code>str | PathLike</code> <p>Name of the data source.</p> required <code>DataType</code> <p>AIMBAT compatible datatype.</p> required <p>Returns:</p> Type Description <code>AimbatEvent</code> <p>AimbatEvent instance.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the datatype is not supported.</p> Source code in <code>aimbat/lib/io/_io.py</code> <pre><code>def create_event(datasource: str | PathLike, datatype: DataType) -&gt; AimbatEvent:\n    \"\"\"Read event data from a data source and create an AimbatEvent.\n\n    Parameters:\n        datasource: Name of the data source.\n        datatype: AIMBAT compatible datatype.\n\n    Returns:\n        AimbatEvent instance.\n\n    Raises:\n        NotImplementedError: If the datatype is not supported.\n    \"\"\"\n\n    logger.debug(f\"Creating AimbatEvent from {datasource}.\")\n\n    event_creator_fn = event_creator.get(datatype)\n    if event_creator_fn is None:\n        raise NotImplementedError(\n            f\"I don't know how to create an AimbatEvent from {datatype}.\"\n        )\n    return event_creator_fn(datasource)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.io.create_event(datasource)","title":"<code>datasource</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.create_event(datatype)","title":"<code>datatype</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.create_seismogram","title":"create_seismogram","text":"<pre><code>create_seismogram(\n    datasource: str | PathLike, datatype: DataType\n) -&gt; AimbatSeismogram\n</code></pre> <p>Read seismogram data from a data source and create an AimbatSeismogram.</p> <p>Parameters:</p> Name Type Description Default <code>str | PathLike</code> <p>Name of the data source.</p> required <code>DataType</code> <p>AIMBAT compatible datatype.</p> required <p>Returns:</p> Type Description <code>AimbatSeismogram</code> <p>AimbatSeismogram instance.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the datatype is not supported.</p> Source code in <code>aimbat/lib/io/_io.py</code> <pre><code>def create_seismogram(\n    datasource: str | PathLike, datatype: DataType\n) -&gt; AimbatSeismogram:\n    \"\"\"Read seismogram data from a data source and create an AimbatSeismogram.\n\n    Parameters:\n        datasource: Name of the data source.\n        datatype: AIMBAT compatible datatype.\n\n    Returns:\n        AimbatSeismogram instance.\n\n    Raises:\n        NotImplementedError: If the datatype is not supported.\n    \"\"\"\n\n    logger.debug(f\"Creating AimbatSeismogram from {datasource}.\")\n\n    station_creator_fn = seismogram_creator.get(datatype)\n    if station_creator_fn is None:\n        raise NotImplementedError(\n            f\"I don't know how to create an AimbatSeismgoram from {datatype}.\"\n        )\n    return station_creator_fn(datasource)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.io.create_seismogram(datasource)","title":"<code>datasource</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.create_seismogram(datatype)","title":"<code>datatype</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.create_station","title":"create_station","text":"<pre><code>create_station(\n    datasource: str | PathLike, datatype: DataType\n) -&gt; AimbatStation\n</code></pre> <p>Read station data from a data source and create an AimbatStation.</p> <p>Parameters:</p> Name Type Description Default <code>str | PathLike</code> <p>Name of the data source.</p> required <code>DataType</code> <p>AIMBAT compatible datatype.</p> required <p>Returns:</p> Type Description <code>AimbatStation</code> <p>AimbatStation instance.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the datatype is not supported.</p> Source code in <code>aimbat/lib/io/_io.py</code> <pre><code>def create_station(datasource: str | PathLike, datatype: DataType) -&gt; AimbatStation:\n    \"\"\"Read station data from a data source and create an AimbatStation.\n\n    Parameters:\n        datasource: Name of the data source.\n        datatype: AIMBAT compatible datatype.\n\n    Returns:\n        AimbatStation instance.\n\n    Raises:\n        NotImplementedError: If the datatype is not supported.\n    \"\"\"\n\n    logger.debug(f\"Creating AimbatStation from {datasource}.\")\n\n    station_creator_fn = station_creator.get(datatype)\n    if station_creator_fn is None:\n        raise NotImplementedError(\n            f\"I don't know how to create an AimbatStation from {datatype}.\"\n        )\n    return station_creator_fn(datasource)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.io.create_station(datasource)","title":"<code>datasource</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.create_station(datatype)","title":"<code>datatype</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.read_seismogram_data","title":"read_seismogram_data","text":"<pre><code>read_seismogram_data(\n    datasource: str | PathLike, datatype: DataType\n) -&gt; NDArray[float64]\n</code></pre> <p>Read seismogram data from a data source.</p> <p>Parameters:</p> Name Type Description Default <code>str | PathLike</code> <p>Name of the data source.</p> required <code>DataType</code> <p>AIMBAT compatible filetype.</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Seismogram data.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the datatype is not supported.</p> Source code in <code>aimbat/lib/io/_io.py</code> <pre><code>def read_seismogram_data(\n    datasource: str | PathLike, datatype: DataType\n) -&gt; npt.NDArray[np.float64]:\n    \"\"\"Read seismogram data from a data source.\n\n    Parameters:\n        datasource: Name of the data source.\n        datatype: AIMBAT compatible filetype.\n\n    Returns:\n        Seismogram data.\n\n    Raises:\n        NotImplementedError: If the datatype is not supported.\n    \"\"\"\n\n    logger.debug(f\"Reading seismogram data from {datasource}.\")\n\n    data_reader_fn = seismogram_data_reader.get(datatype)\n    if data_reader_fn is None:\n        raise NotImplementedError(f\"I don't know how to read data of type {datatype}.\")\n    return data_reader_fn(datasource)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.io.read_seismogram_data(datasource)","title":"<code>datasource</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.read_seismogram_data(datatype)","title":"<code>datatype</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.write_seismogram_data","title":"write_seismogram_data","text":"<pre><code>write_seismogram_data(\n    datasource: str | PathLike,\n    datatype: DataType,\n    data: NDArray[float64],\n) -&gt; None\n</code></pre> <p>Write seismogram data to a data source.</p> <p>Parameters:</p> Name Type Description Default <code>str | PathLike</code> <p>Name of the data source.</p> required <code>DataType</code> <p>AIMBAT compatible filetype.</p> required <code>NDArray[float64]</code> <p>Seismogram data</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the datatype is not supported.</p> Source code in <code>aimbat/lib/io/_io.py</code> <pre><code>def write_seismogram_data(\n    datasource: str | PathLike,\n    datatype: DataType,\n    data: npt.NDArray[np.float64],\n) -&gt; None:\n    \"\"\"Write seismogram data to a data source.\n\n    Parameters:\n        datasource: Name of the data source.\n        datatype: AIMBAT compatible filetype.\n        data: Seismogram data\n\n    Raises:\n        NotImplementedError: If the datatype is not supported.\n    \"\"\"\n\n    logger.debug(f\"Writing seismogram data to {datasource}.\")\n\n    data_writer_fn = seismogram_data_writer.get(datatype)\n    if data_writer_fn is None:\n        raise NotImplementedError(\n            f\"I don't know how to write data to file of type {datatype}\"\n        )\n    data_writer_fn(datasource, data)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.io.write_seismogram_data(datasource)","title":"<code>datasource</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.write_seismogram_data(datatype)","title":"<code>datatype</code>","text":""},{"location":"reference/lib/#aimbat.lib.io.write_seismogram_data(data)","title":"<code>data</code>","text":""},{"location":"reference/lib/#aimbat.lib.models","title":"models","text":"<p>This module defines the \"Aimbat\" classes.</p> <p>These classes are ORMs that present data stored in a database as classes to use with python in AIMBAT.</p> <p>Classes:</p> Name Description <code>AimbatDataSource</code> <p>Class to store data source information.</p> <code>AimbatDataSourceCreate</code> <p>Class to store data source information.</p> <code>AimbatEvent</code> <p>Store event information.</p> <code>AimbatEventParameters</code> <p>Processing parameters common to all seismograms of a particular event.</p> <code>AimbatEventParametersBase</code> <p>Base class that defines the event parameters used in AIMBAT.</p> <code>AimbatEventParametersSnapshot</code> <p>Event parameter snapshot.</p> <code>AimbatSeismogram</code> <p>Class to store seismogram data</p> <code>AimbatSeismogramParameters</code> <p>Class to store ICCS processing parameters of a single seismogram.</p> <code>AimbatSeismogramParametersBase</code> <p>Base class that defines the seismogram parameters used in AIMBAT.</p> <code>AimbatSeismogramParametersSnapshot</code> <p>Class to store a snapshot of ICCS processing parameters of a single seismogram.</p> <code>AimbatSnapshot</code> <p>Class to store AIMBAT snapshots.</p> <code>AimbatStation</code> <p>Class to store station information.</p> <p>Attributes:</p> Name Type Description <code>AimbatTypes</code> <p>Union of all AIMBAT models that exist in the database.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatTypes","title":"AimbatTypes  <code>module-attribute</code>","text":"<pre><code>AimbatTypes = (\n    AimbatDataSource\n    | AimbatStation\n    | AimbatEvent\n    | AimbatEventParameters\n    | AimbatSeismogram\n    | AimbatSeismogramParameters\n    | AimbatSnapshot\n    | AimbatEventParametersSnapshot\n    | AimbatSeismogramParametersSnapshot\n)\n</code></pre> <p>Union of all AIMBAT models that exist in the database.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatDataSource","title":"AimbatDataSource","text":"<p>               Bases: <code>SQLModel</code></p> <p>Class to store data source information.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatDataSource(SQLModel, table=True):\n    \"\"\"Class to store data source information.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    sourcename: str\n    datatype: io.DataType\n    seismogram_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatseismogram.id\", ondelete=\"CASCADE\"\n    )\n    seismogram: \"AimbatSeismogram\" = Relationship(back_populates=\"datasource\")\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatDataSourceCreate","title":"AimbatDataSourceCreate","text":"<p>               Bases: <code>SQLModel</code></p> <p>Class to store data source information.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatDataSourceCreate(SQLModel):\n    \"\"\"Class to store data source information.\"\"\"\n\n    sourcename: str | os.PathLike = Field(unique=True)\n    datatype: io.DataType = io.DataType.SAC\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent","title":"AimbatEvent","text":"<p>               Bases: <code>SQLModel</code></p> <p>Store event information.</p> <p>Attributes:</p> Name Type Description <code>active</code> <code>bool | None</code> <p>Indicates if an event is the active event.</p> <code>depth</code> <code>float | None</code> <p>Event depth.</p> <code>id</code> <code>UUID</code> <p>Unique ID.</p> <code>latitude</code> <code>float</code> <p>Event latitude.</p> <code>longitude</code> <code>float</code> <p>Event longitude.</p> <code>parameters</code> <code>AimbatEventParameters</code> <p>Event parameters.</p> <code>seismograms</code> <code>list[AimbatSeismogram]</code> <p>List of seismograms of this event.</p> <code>snapshots</code> <code>list[AimbatSnapshot]</code> <p>List of snapshots.</p> <code>time</code> <code>datetime</code> <p>Event time.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatEvent(SQLModel, table=True):\n    \"\"\"Store event information.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    \"Unique ID.\"\n\n    active: bool | None = Field(default=None, unique=True)\n    \"Indicates if an event is the active event.\"\n\n    time: datetime = Field(unique=True, sa_type=_DateTimeUTC, allow_mutation=False)\n    \"Event time.\"\n\n    latitude: float\n    \"Event latitude.\"\n\n    longitude: float\n    \"Event longitude.\"\n\n    depth: float | None = None\n    \"Event depth.\"\n\n    seismograms: list[\"AimbatSeismogram\"] = Relationship(\n        back_populates=\"event\", cascade_delete=True\n    )\n    \"List of seismograms of this event.\"\n\n    parameters: \"AimbatEventParameters\" = Relationship(\n        back_populates=\"event\", cascade_delete=True\n    )\n    \"Event parameters.\"\n\n    snapshots: list[\"AimbatSnapshot\"] = Relationship(\n        back_populates=\"event\", cascade_delete=True\n    )\n    \"List of snapshots.\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.active","title":"active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>active: bool | None = Field(default=None, unique=True)\n</code></pre> <p>Indicates if an event is the active event.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.depth","title":"depth  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depth: float | None = None\n</code></pre> <p>Event depth.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: UUID = Field(default_factory=uuid4, primary_key=True)\n</code></pre> <p>Unique ID.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.latitude","title":"latitude  <code>instance-attribute</code>","text":"<pre><code>latitude: float\n</code></pre> <p>Event latitude.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.longitude","title":"longitude  <code>instance-attribute</code>","text":"<pre><code>longitude: float\n</code></pre> <p>Event longitude.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.parameters","title":"parameters  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>parameters: AimbatEventParameters = Relationship(\n    back_populates=\"event\", cascade_delete=True\n)\n</code></pre> <p>Event parameters.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.seismograms","title":"seismograms  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>seismograms: list[AimbatSeismogram] = Relationship(\n    back_populates=\"event\", cascade_delete=True\n)\n</code></pre> <p>List of seismograms of this event.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.snapshots","title":"snapshots  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>snapshots: list[AimbatSnapshot] = Relationship(\n    back_populates=\"event\", cascade_delete=True\n)\n</code></pre> <p>List of snapshots.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEvent.time","title":"time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>time: datetime = Field(\n    unique=True, sa_type=_DateTimeUTC, allow_mutation=False\n)\n</code></pre> <p>Event time.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters","title":"AimbatEventParameters","text":"<p>               Bases: <code>AimbatEventParametersBase</code></p> <p>Processing parameters common to all seismograms of a particular event.</p> <p>Attributes:</p> Name Type Description <code>completed</code> <code>bool</code> <p>Mark an event as completed.</p> <code>event</code> <code>AimbatEvent</code> <p>Event these parameters are associated with.</p> <code>event_id</code> <code>UUID</code> <p>Event ID these parameters are associated with.</p> <code>id</code> <code>UUID</code> <p>Unique ID.</p> <code>min_ccnorm</code> <code>float</code> <p>Minimum cross-correlation used when automatically de-selecting seismograms.</p> <code>snapshots</code> <code>list[AimbatEventParametersSnapshot]</code> <p>Snapshots these parameters are associated with.</p> <code>window_post</code> <code>timedelta</code> <p>Post-pick window length.</p> <code>window_pre</code> <code>timedelta</code> <p>Pre-pick window length.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatEventParameters(AimbatEventParametersBase, table=True):\n    \"\"\"Processing parameters common to all seismograms of a particular event.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    \"Unique ID.\"\n\n    event_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatevent.id\", ondelete=\"CASCADE\"\n    )\n    \"Event ID these parameters are associated with.\"\n\n    event: AimbatEvent = Relationship(back_populates=\"parameters\")\n    \"Event these parameters are associated with.\"\n\n    snapshots: list[\"AimbatEventParametersSnapshot\"] = Relationship(\n        back_populates=\"parameters\", cascade_delete=True\n    )\n    \"Snapshots these parameters are associated with.\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: bool = False\n</code></pre> <p>Mark an event as completed.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: AimbatEvent = Relationship(\n    back_populates=\"parameters\"\n)\n</code></pre> <p>Event these parameters are associated with.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.event_id","title":"event_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_id: UUID = Field(\n    default=None,\n    foreign_key=\"aimbatevent.id\",\n    ondelete=\"CASCADE\",\n)\n</code></pre> <p>Event ID these parameters are associated with.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: UUID = Field(default_factory=uuid4, primary_key=True)\n</code></pre> <p>Unique ID.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.min_ccnorm","title":"min_ccnorm  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_ccnorm: float = Field(\n    ge=0.0, le=1.0, default=min_ccnorm\n)\n</code></pre> <p>Minimum cross-correlation used when automatically de-selecting seismograms.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.snapshots","title":"snapshots  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>snapshots: list[AimbatEventParametersSnapshot] = (\n    Relationship(\n        back_populates=\"parameters\", cascade_delete=True\n    )\n)\n</code></pre> <p>Snapshots these parameters are associated with.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.window_post","title":"window_post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_post: timedelta = Field(gt=0, default=window_post)\n</code></pre> <p>Post-pick window length.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParameters.window_pre","title":"window_pre  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_pre: timedelta = Field(lt=0, default=window_pre)\n</code></pre> <p>Pre-pick window length.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersBase","title":"AimbatEventParametersBase","text":"<p>               Bases: <code>SQLModel</code></p> <p>Base class that defines the event parameters used in AIMBAT.</p> <p>This class serves as a base that is inherited by the actual classes that create the database tables. The attributes in this class correspond exactl to the AIMBAT event parameters.</p> <p>Attributes:</p> Name Type Description <code>completed</code> <code>bool</code> <p>Mark an event as completed.</p> <code>min_ccnorm</code> <code>float</code> <p>Minimum cross-correlation used when automatically de-selecting seismograms.</p> <code>window_post</code> <code>timedelta</code> <p>Post-pick window length.</p> <code>window_pre</code> <code>timedelta</code> <p>Pre-pick window length.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatEventParametersBase(SQLModel):\n    \"\"\"Base class that defines the event parameters used in AIMBAT.\n\n    This class serves as a base that is inherited by the actual\n    classes that create the database tables. The attributes in\n    this class correspond exactl to the AIMBAT event parameters.\n    \"\"\"\n\n    completed: bool = False\n    \"Mark an event as completed.\"\n\n    min_ccnorm: float = Field(ge=0.0, le=1.0, default=settings.min_ccnorm)\n    \"Minimum cross-correlation used when automatically de-selecting seismograms.\"\n\n    window_pre: timedelta = Field(lt=0, default=settings.window_pre)\n    \"Pre-pick window length.\"\n\n    window_post: timedelta = Field(gt=0, default=settings.window_post)\n    \"Post-pick window length.\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersBase.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: bool = False\n</code></pre> <p>Mark an event as completed.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersBase.min_ccnorm","title":"min_ccnorm  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_ccnorm: float = Field(\n    ge=0.0, le=1.0, default=min_ccnorm\n)\n</code></pre> <p>Minimum cross-correlation used when automatically de-selecting seismograms.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersBase.window_post","title":"window_post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_post: timedelta = Field(gt=0, default=window_post)\n</code></pre> <p>Post-pick window length.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersBase.window_pre","title":"window_pre  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_pre: timedelta = Field(lt=0, default=window_pre)\n</code></pre> <p>Pre-pick window length.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersSnapshot","title":"AimbatEventParametersSnapshot","text":"<p>               Bases: <code>AimbatEventParametersBase</code></p> <p>Event parameter snapshot.</p> <p>Attributes:</p> Name Type Description <code>completed</code> <code>bool</code> <p>Mark an event as completed.</p> <code>min_ccnorm</code> <code>float</code> <p>Minimum cross-correlation used when automatically de-selecting seismograms.</p> <code>window_post</code> <code>timedelta</code> <p>Post-pick window length.</p> <code>window_pre</code> <code>timedelta</code> <p>Pre-pick window length.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatEventParametersSnapshot(AimbatEventParametersBase, table=True):\n    \"\"\"Event parameter snapshot.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    snapshot_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatsnapshot.id\", ondelete=\"CASCADE\"\n    )\n    snapshot: \"AimbatSnapshot\" = Relationship(\n        back_populates=\"event_parameters_snapshot\"\n    )\n    parameters: AimbatEventParameters = Relationship(back_populates=\"snapshots\")\n    parameters_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbateventparameters.id\", ondelete=\"CASCADE\"\n    )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersSnapshot.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: bool = False\n</code></pre> <p>Mark an event as completed.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersSnapshot.min_ccnorm","title":"min_ccnorm  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_ccnorm: float = Field(\n    ge=0.0, le=1.0, default=min_ccnorm\n)\n</code></pre> <p>Minimum cross-correlation used when automatically de-selecting seismograms.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersSnapshot.window_post","title":"window_post  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_post: timedelta = Field(gt=0, default=window_post)\n</code></pre> <p>Post-pick window length.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatEventParametersSnapshot.window_pre","title":"window_pre  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>window_pre: timedelta = Field(lt=0, default=window_pre)\n</code></pre> <p>Pre-pick window length.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogram","title":"AimbatSeismogram","text":"<p>               Bases: <code>SQLModel</code></p> <p>Class to store seismogram data</p> <p>Attributes:</p> Name Type Description <code>begin_time</code> <code>datetime</code> <p>Begin time of seismogram.</p> <code>delta</code> <code>timedelta</code> <p>Sampling interval.</p> <code>id</code> <code>UUID</code> <p>Unique ID.</p> <code>t0</code> <code>datetime</code> <p>Initial pick.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatSeismogram(SQLModel, table=True):\n    \"\"\"Class to store seismogram data\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    \"Unique ID.\"\n\n    begin_time: datetime = Field(sa_type=_DateTimeUTC)\n    \"Begin time of seismogram.\"\n\n    delta: timedelta\n    \"Sampling interval.\"\n\n    t0: datetime = Field(sa_type=_DateTimeUTC)\n    \"Initial pick.\"\n\n    datasource: AimbatDataSource = Relationship(\n        back_populates=\"seismogram\", cascade_delete=True\n    )\n    station_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatstation.id\", ondelete=\"CASCADE\"\n    )\n    station: AimbatStation = Relationship(back_populates=\"seismograms\")\n    event_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatevent.id\", ondelete=\"CASCADE\"\n    )\n    event: AimbatEvent = Relationship(back_populates=\"seismograms\")\n    parameters: \"AimbatSeismogramParameters\" = Relationship(\n        back_populates=\"seismogram\",\n        cascade_delete=True,\n    )\n\n    @property\n    def flip(self) -&gt; bool:\n        return self.parameters.flip\n\n    @flip.setter\n    def flip(self, value: bool) -&gt; None:\n        self.parameters.flip = value\n\n    @property\n    def select(self) -&gt; bool:\n        return self.parameters.select\n\n    @select.setter\n    def select(self, value: bool) -&gt; None:\n        self.parameters.select = value\n\n    @property\n    def t1(self) -&gt; datetime | None:\n        return self.parameters.t1\n\n    @t1.setter\n    def t1(self, value: datetime | None) -&gt; None:\n        self.parameters.t1 = value\n\n    def __len__(self) -&gt; int:\n        return np.size(self.data)\n\n    @property\n    def end_time(self) -&gt; datetime:\n        if len(self) == 0:\n            return self.begin_time\n        return self.begin_time + self.delta * (len(self) - 1)\n\n    @property\n    def data(self) -&gt; np.ndarray:\n        if self.datasource is None:\n            raise ValueError(\"Expected a valid datasource name, got None.\")\n        return io.read_seismogram_data(\n            self.datasource.sourcename, self.datasource.datatype\n        )\n\n    @data.setter\n    def data(self, value: np.ndarray) -&gt; None:\n        if self.datasource is None:\n            raise ValueError(\"Expected a valid datasource name, got None.\")\n        io.write_seismogram_data(\n            self.datasource.sourcename, self.datasource.datatype, value\n        )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogram.begin_time","title":"begin_time  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>begin_time: datetime = Field(sa_type=_DateTimeUTC)\n</code></pre> <p>Begin time of seismogram.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogram.delta","title":"delta  <code>instance-attribute</code>","text":"<pre><code>delta: timedelta\n</code></pre> <p>Sampling interval.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogram.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: UUID = Field(default_factory=uuid4, primary_key=True)\n</code></pre> <p>Unique ID.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogram.t0","title":"t0  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>t0: datetime = Field(sa_type=_DateTimeUTC)\n</code></pre> <p>Initial pick.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParameters","title":"AimbatSeismogramParameters","text":"<p>               Bases: <code>AimbatSeismogramParametersBase</code></p> <p>Class to store ICCS processing parameters of a single seismogram.</p> <p>Attributes:</p> Name Type Description <code>flip</code> <code>bool</code> <p>Whether or not the seismogram should be flipped.</p> <code>select</code> <code>bool</code> <p>Whether or not this seismogram should be used for processing.</p> <code>t1</code> <code>datetime | None</code> <p>Working pick.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatSeismogramParameters(AimbatSeismogramParametersBase, table=True):\n    \"\"\"Class to store ICCS processing parameters of a single seismogram.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    seismogram_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatseismogram.id\", ondelete=\"CASCADE\"\n    )\n    seismogram: AimbatSeismogram = Relationship(back_populates=\"parameters\")\n    snapshots: list[\"AimbatSeismogramParametersSnapshot\"] = Relationship(\n        back_populates=\"parameters\", cascade_delete=True\n    )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParameters.flip","title":"flip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flip: bool = False\n</code></pre> <p>Whether or not the seismogram should be flipped.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParameters.select","title":"select  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>select: bool = True\n</code></pre> <p>Whether or not this seismogram should be used for processing.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParameters.t1","title":"t1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>t1: datetime | None = Field(\n    default=None, sa_type=_DateTimeUTC\n)\n</code></pre> <p>Working pick.</p> <p>This pick serves as working as well as output pick. It is changed by:</p> <ol> <li>Picking the phase arrival in the stack.</li> <li>Running ICCS.</li> <li>Running MCCC.</li> </ol>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersBase","title":"AimbatSeismogramParametersBase","text":"<p>               Bases: <code>SQLModel</code></p> <p>Base class that defines the seismogram parameters used in AIMBAT.</p> <p>Attributes:</p> Name Type Description <code>flip</code> <code>bool</code> <p>Whether or not the seismogram should be flipped.</p> <code>select</code> <code>bool</code> <p>Whether or not this seismogram should be used for processing.</p> <code>t1</code> <code>datetime | None</code> <p>Working pick.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatSeismogramParametersBase(SQLModel):\n    \"\"\"Base class that defines the seismogram parameters used in AIMBAT.\"\"\"\n\n    flip: bool = False\n    \"Whether or not the seismogram should be flipped.\"\n\n    select: bool = True\n    \"Whether or not this seismogram should be used for processing.\"\n\n    t1: datetime | None = Field(default=None, sa_type=_DateTimeUTC)\n    \"\"\"Working pick.\n\n    This pick serves as working as well as output pick. It is changed by:\n\n    1. Picking the phase arrival in the stack.\n    2. Running ICCS.\n    3. Running MCCC.\n    \"\"\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersBase.flip","title":"flip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flip: bool = False\n</code></pre> <p>Whether or not the seismogram should be flipped.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersBase.select","title":"select  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>select: bool = True\n</code></pre> <p>Whether or not this seismogram should be used for processing.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersBase.t1","title":"t1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>t1: datetime | None = Field(\n    default=None, sa_type=_DateTimeUTC\n)\n</code></pre> <p>Working pick.</p> <p>This pick serves as working as well as output pick. It is changed by:</p> <ol> <li>Picking the phase arrival in the stack.</li> <li>Running ICCS.</li> <li>Running MCCC.</li> </ol>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersSnapshot","title":"AimbatSeismogramParametersSnapshot","text":"<p>               Bases: <code>AimbatSeismogramParametersBase</code></p> <p>Class to store a snapshot of ICCS processing parameters of a single seismogram.</p> <p>Attributes:</p> Name Type Description <code>flip</code> <code>bool</code> <p>Whether or not the seismogram should be flipped.</p> <code>select</code> <code>bool</code> <p>Whether or not this seismogram should be used for processing.</p> <code>t1</code> <code>datetime | None</code> <p>Working pick.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatSeismogramParametersSnapshot(AimbatSeismogramParametersBase, table=True):\n    \"\"\"Class to store a snapshot of ICCS processing parameters of a single seismogram.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    seismogram_parameters_id: uuid.UUID = Field(\n        foreign_key=\"aimbatseismogramparameters.id\", ondelete=\"CASCADE\"\n    )\n    parameters: AimbatSeismogramParameters = Relationship(back_populates=\"snapshots\")\n    snapshot_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatsnapshot.id\", ondelete=\"CASCADE\"\n    )\n    snapshot: \"AimbatSnapshot\" = Relationship(\n        back_populates=\"seismogram_parameters_snapshots\"\n    )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersSnapshot.flip","title":"flip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>flip: bool = False\n</code></pre> <p>Whether or not the seismogram should be flipped.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersSnapshot.select","title":"select  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>select: bool = True\n</code></pre> <p>Whether or not this seismogram should be used for processing.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSeismogramParametersSnapshot.t1","title":"t1  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>t1: datetime | None = Field(\n    default=None, sa_type=_DateTimeUTC\n)\n</code></pre> <p>Working pick.</p> <p>This pick serves as working as well as output pick. It is changed by:</p> <ol> <li>Picking the phase arrival in the stack.</li> <li>Running ICCS.</li> <li>Running MCCC.</li> </ol>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSnapshot","title":"AimbatSnapshot","text":"<p>               Bases: <code>SQLModel</code></p> <p>Class to store AIMBAT snapshots.</p> <p>The AimbatSnapshot class does not actually save any parameter data. It is used to keep track of the AimbatEventParametersSnapshot and AimbatSeismogramParametersSnapshot instances.</p> <p>Attributes:</p> Name Type Description <code>event</code> <code>AimbatEvent</code> <p>Event this snapshot is associated with.</p> <code>event_id</code> <code>UUID</code> <p>Event ID this snapshot is associated with.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatSnapshot(SQLModel, table=True):\n    \"\"\"Class to store AIMBAT snapshots.\n\n    The AimbatSnapshot class does not actually save any parameter data.\n    It is used to keep track of the AimbatEventParametersSnapshot and\n    AimbatSeismogramParametersSnapshot instances.\n    \"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    date: datetime = Field(\n        default_factory=lambda: datetime.now(timezone.utc),\n        unique=True,\n        allow_mutation=False,\n        sa_type=_DateTimeUTC,\n    )\n    comment: str | None = None\n    event_parameters_snapshot: AimbatEventParametersSnapshot = Relationship(\n        back_populates=\"snapshot\", cascade_delete=True\n    )\n    seismogram_parameters_snapshots: list[AimbatSeismogramParametersSnapshot] = (\n        Relationship(back_populates=\"snapshot\", cascade_delete=True)\n    )\n\n    event_id: uuid.UUID = Field(\n        default=None, foreign_key=\"aimbatevent.id\", ondelete=\"CASCADE\"\n    )\n    \"Event ID this snapshot is associated with.\"\n\n    event: AimbatEvent = Relationship(back_populates=\"snapshots\")\n    \"Event this snapshot is associated with.\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSnapshot.event","title":"event  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event: AimbatEvent = Relationship(\n    back_populates=\"snapshots\"\n)\n</code></pre> <p>Event this snapshot is associated with.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatSnapshot.event_id","title":"event_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>event_id: UUID = Field(\n    default=None,\n    foreign_key=\"aimbatevent.id\",\n    ondelete=\"CASCADE\",\n)\n</code></pre> <p>Event ID this snapshot is associated with.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation","title":"AimbatStation","text":"<p>               Bases: <code>SQLModel</code></p> <p>Class to store station information.</p> <p>Attributes:</p> Name Type Description <code>channel</code> <code>str</code> <p>Channel code.</p> <code>elevation</code> <code>float | None</code> <p>Station elevation.</p> <code>id</code> <code>UUID</code> <p>Unique ID.</p> <code>latitude</code> <code>float</code> <p>Station latitude</p> <code>location</code> <code>str</code> <p>Location ID.</p> <code>longitude</code> <code>float</code> <p>Station longitude</p> <code>name</code> <code>str</code> <p>Station name.</p> <code>network</code> <code>str</code> <p>Network name.</p> <code>seismograms</code> <code>list[AimbatSeismogram]</code> <p>Seismograms recorded at this station.</p> Source code in <code>aimbat/lib/models.py</code> <pre><code>class AimbatStation(SQLModel, table=True):\n    \"\"\"Class to store station information.\"\"\"\n\n    id: uuid.UUID = Field(default_factory=uuid.uuid4, primary_key=True)\n    \"Unique ID.\"\n\n    name: str = Field(allow_mutation=False)\n    \"Station name.\"\n\n    network: str = Field(allow_mutation=False)\n    \"Network name.\"\n\n    location: str = Field(allow_mutation=False)\n    \"Location ID.\"\n\n    channel: str = Field(allow_mutation=False)\n    \"Channel code.\"\n\n    latitude: float\n    \"Station latitude\"\n\n    longitude: float\n    \"Station longitude\"\n\n    elevation: float | None = None\n    \"Station elevation.\"\n\n    seismograms: list[\"AimbatSeismogram\"] = Relationship(\n        back_populates=\"station\", cascade_delete=True\n    )\n    \"Seismograms recorded at this station.\"\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.channel","title":"channel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>channel: str = Field(allow_mutation=False)\n</code></pre> <p>Channel code.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.elevation","title":"elevation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>elevation: float | None = None\n</code></pre> <p>Station elevation.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: UUID = Field(default_factory=uuid4, primary_key=True)\n</code></pre> <p>Unique ID.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.latitude","title":"latitude  <code>instance-attribute</code>","text":"<pre><code>latitude: float\n</code></pre> <p>Station latitude</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: str = Field(allow_mutation=False)\n</code></pre> <p>Location ID.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.longitude","title":"longitude  <code>instance-attribute</code>","text":"<pre><code>longitude: float\n</code></pre> <p>Station longitude</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(allow_mutation=False)\n</code></pre> <p>Station name.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.network","title":"network  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>network: str = Field(allow_mutation=False)\n</code></pre> <p>Network name.</p>"},{"location":"reference/lib/#aimbat.lib.models.AimbatStation.seismograms","title":"seismograms  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>seismograms: list[AimbatSeismogram] = Relationship(\n    back_populates=\"station\", cascade_delete=True\n)\n</code></pre> <p>Seismograms recorded at this station.</p>"},{"location":"reference/lib/#aimbat.lib.project","title":"project","text":"<p>Functions:</p> Name Description <code>create_project</code> <p>Create a new AIMBAT project.</p> <code>delete_project</code> <p>Delete the AIMBAT project.</p> <code>print_project_info</code> <p>Show AIMBAT project information.</p>"},{"location":"reference/lib/#aimbat.lib.project.create_project","title":"create_project","text":"<pre><code>create_project() -&gt; None\n</code></pre> <p>Create a new AIMBAT project.</p> Source code in <code>aimbat/lib/project.py</code> <pre><code>def create_project() -&gt; None:\n    \"\"\"Create a new AIMBAT project.\"\"\"\n\n    # import this to create tables below\n    import aimbat.lib.models  # noqa: F401\n\n    logger.info(f\"Creating new project in {engine=}.\")\n\n    if _project_exists():\n        raise RuntimeError(\n            f\"Unable to create a new project: project already exists in {engine=}!\"\n        )\n\n    logger.debug(\"Creating database tables and loading defaults.\")\n\n    SQLModel.metadata.create_all(engine)\n    if engine.driver == \"pysqlite\":\n        with engine.connect() as connection:\n            connection.execute(text(\"PRAGMA foreign_keys=ON\"))  # for SQLite only\n\n    # This trigger ensures that only one event can be active at a time\n    with engine.connect() as connection:\n        connection.execute(\n            text(\n                \"\"\"CREATE TRIGGER single_active_event\n        BEFORE UPDATE ON aimbatevent\n        FOR EACH ROW\n        WHEN NEW.active = TRUE\n        BEGIN\n            UPDATE aimbatevent SET active = NULL\n        WHERE active = TRUE AND id != NEW.id;\n        END;\n    \"\"\"\n            )\n        )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.project.delete_project","title":"delete_project","text":"<pre><code>delete_project() -&gt; None\n</code></pre> <p>Delete the AIMBAT project.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If unable to delete project.</p> Source code in <code>aimbat/lib/project.py</code> <pre><code>def delete_project() -&gt; None:\n    \"\"\"Delete the AIMBAT project.\n\n    Raises:\n        RuntimeError: If unable to delete project.\n    \"\"\"\n\n    logger.info(f\"Deleting project in {engine=}.\")\n\n    if _project_exists():\n        if engine.driver == \"pysqlite\":\n            database = engine.url.database\n            engine.dispose()\n            if database == \":memory:\":\n                logger.info(\"Running database in memory, nothing to delete.\")\n                return\n            elif database:\n                project_path = Path(database)\n                logger.info(f\"Deleting project file: {project_path=}\")\n                project_path.unlink()\n                return\n    raise RuntimeError(\"Unable to find/delete project.\")\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.project.print_project_info","title":"print_project_info","text":"<pre><code>print_project_info() -&gt; None\n</code></pre> <p>Show AIMBAT project information.</p> <p>Parameters:</p> Name Type Description Default <p>Database engine.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If no project found.</p> Source code in <code>aimbat/lib/project.py</code> <pre><code>def print_project_info() -&gt; None:\n    \"\"\"Show AIMBAT project information.\n\n    Parameters:\n        engine: Database engine.\n\n    Raises:\n        RuntimeError: If no project found.\n    \"\"\"\n\n    logger.info(\"Printing project info.\")\n\n    if not _project_exists():\n        raise RuntimeError(\n            'No AIMBAT project found. Try running \"aimbat project create\" first.'\n        )\n\n    with Session(engine) as session:\n        grid = Table.grid(expand=False)\n        grid.add_column()\n        grid.add_column(justify=\"left\")\n        if engine.driver == \"pysqlite\":\n            project = str(engine.url.database)\n            grid.add_row(\"AIMBAT Project File: \", project)\n\n        events = len(session.exec(select(AimbatEvent)).all())\n        completed_events = len(event.get_completed_events(session))\n        stations = len(session.exec(select(AimbatStation)).all())\n        seismograms = len(session.exec(select(AimbatSeismogram)).all())\n        selected_seismograms = len(\n            seismogram.get_selected_seismograms(session, all_events=True)\n        )\n\n        grid.add_row(\n            \"Number of Events (total/completed): \",\n            f\"({events}/{completed_events})\",\n        )\n\n        try:\n            active_event = event.get_active_event(session)\n            active_event_id = active_event.id\n            active_stations = len(station.get_stations_in_event(session, active_event))\n            seismograms_in_event = len(active_event.seismograms)\n            selected_seismograms_in_event = len(\n                seismogram.get_selected_seismograms(session)\n            )\n        except NoResultFound:\n            active_event_id = None\n            active_stations = None\n            seismograms_in_event = None\n            selected_seismograms_in_event = None\n        grid.add_row(\"Active Event ID: \", f\"{active_event_id}\")\n        grid.add_row(\n            \"Number of Stations in Project (total/active event): \",\n            f\"({stations}/{active_stations})\",\n        )\n\n        grid.add_row(\n            \"Number of Seismograms in Project (total/selected): \",\n            f\"({seismograms}/{selected_seismograms})\",\n        )\n        grid.add_row(\n            \"Number of Seismograms in Active Event (total/selected): \",\n            f\"({seismograms_in_event}/{selected_seismograms_in_event})\",\n        )\n\n        console = Console()\n        console.print(\n            Panel(grid, title=\"Project Info\", title_align=\"left\", border_style=\"dim\")\n        )\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.project.print_project_info(engine)","title":"<code>engine</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram","title":"seismogram","text":"<p>Functions:</p> Name Description <code>delete_seismogram</code> <p>Delete an AimbatSeismogram from the database.</p> <code>delete_seismogram_by_id</code> <p>Delete an AimbatSeismogram from the database by ID.</p> <code>dump_seismogram_table</code> <p>Dump the table data to json.</p> <code>get_seismogram_parameter</code> <p>Get parameter value from an AimbatSeismogram instance.</p> <code>get_seismogram_parameter_by_id</code> <p>Get parameter value from an AimbatSeismogram by ID.</p> <code>get_selected_seismograms</code> <p>Get the selected seismograms for the active avent.</p> <code>plot_seismograms</code> <p>Plot all seismograms for a particular event ordered by great circle distance.</p> <code>print_seismogram_table</code> <p>Prints a pretty table with AIMBAT seismograms.</p> <code>set_seismogram_parameter</code> <p>Set parameter value for an AimbatSeismogram instance.</p> <code>set_seismogram_parameter_by_id</code> <p>Set parameter value for an AimbatSeismogram by ID.</p>"},{"location":"reference/lib/#aimbat.lib.seismogram.delete_seismogram","title":"delete_seismogram","text":"<pre><code>delete_seismogram(\n    session: Session, seismogram: AimbatSeismogram\n) -&gt; None\n</code></pre> <p>Delete an AimbatSeismogram from the database.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>AimbatSeismogram</code> <p>Seismogram to delete.</p> required Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def delete_seismogram(session: Session, seismogram: AimbatSeismogram) -&gt; None:\n    \"\"\"Delete an AimbatSeismogram from the database.\n\n    Parameters:\n        session: Database session.\n        seismogram: Seismogram to delete.\n    \"\"\"\n\n    logger.info(f\"Deleting seismogram {seismogram.id}.\")\n\n    session.delete(seismogram)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.delete_seismogram(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.delete_seismogram(seismogram)","title":"<code>seismogram</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.delete_seismogram_by_id","title":"delete_seismogram_by_id","text":"<pre><code>delete_seismogram_by_id(\n    session: Session, seismogram_id: UUID\n) -&gt; None\n</code></pre> <p>Delete an AimbatSeismogram from the database by ID.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>UUID</code> <p>Seismogram ID.</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>If no AimbatSeismogram is found with the given ID.</p> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def delete_seismogram_by_id(session: Session, seismogram_id: uuid.UUID) -&gt; None:\n    \"\"\"Delete an AimbatSeismogram from the database by ID.\n\n    Parameters:\n        session: Database session.\n        seismogram_id: Seismogram ID.\n\n    Raises:\n        NoResultFound: If no AimbatSeismogram is found with the given ID.\n    \"\"\"\n\n    logger.debug(f\"Getting seismogram with id={seismogram_id}.\")\n\n    seismogram = session.get(AimbatSeismogram, seismogram_id)\n    if seismogram is None:\n        raise NoResultFound(f\"No AimbatSeismogram found with {seismogram_id=}\")\n    delete_seismogram(session, seismogram)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.delete_seismogram_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.delete_seismogram_by_id(seismogram_id)","title":"<code>seismogram_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.dump_seismogram_table","title":"dump_seismogram_table","text":"<pre><code>dump_seismogram_table() -&gt; None\n</code></pre> <p>Dump the table data to json.</p> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def dump_seismogram_table() -&gt; None:\n    \"\"\"Dump the table data to json.\"\"\"\n\n    logger.info(\"Dumping AIMBAT seismogram table to json.\")\n\n    with Session(engine) as session:\n        aimbat_seismograms = session.exec(select(AimbatSeismogram)).all()\n        dump_to_json(aimbat_seismograms)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter","title":"get_seismogram_parameter","text":"<pre><code>get_seismogram_parameter(\n    seismogram: AimbatSeismogram, name: SeismogramParameter\n) -&gt; bool | datetime\n</code></pre> <p>Get parameter value from an AimbatSeismogram instance.</p> <p>Parameters:</p> Name Type Description Default <code>AimbatSeismogram</code> <p>Seismogram.</p> required <code>SeismogramParameter</code> <p>Name of the parameter value to return.</p> required <p>Returns:</p> Type Description <code>bool | datetime</code> <p>Seismogram parameter value.</p> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def get_seismogram_parameter(\n    seismogram: AimbatSeismogram, name: SeismogramParameter\n) -&gt; bool | datetime:\n    \"\"\"Get parameter value from an AimbatSeismogram instance.\n\n    Parameters:\n        seismogram: Seismogram.\n        name: Name of the parameter value to return.\n\n    Returns:\n        Seismogram parameter value.\n    \"\"\"\n\n    logger.info(f\"Getting seismogram parameter {name=} value for {seismogram=}.\")\n\n    return getattr(seismogram.parameters, name)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter(seismogram)","title":"<code>seismogram</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter(name)","title":"<code>name</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter_by_id","title":"get_seismogram_parameter_by_id","text":"<pre><code>get_seismogram_parameter_by_id(\n    session: Session,\n    seismogram_id: UUID,\n    name: SeismogramParameter,\n) -&gt; bool | datetime\n</code></pre> <p>Get parameter value from an AimbatSeismogram by ID.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>UUID</code> <p>Seismogram ID.</p> required <code>SeismogramParameter</code> <p>Name of the parameter value to return.</p> required <p>Returns:</p> Type Description <code>bool | datetime</code> <p>Seismogram parameter value.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no AimbatSeismogram is found with the given ID.</p> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def get_seismogram_parameter_by_id(\n    session: Session, seismogram_id: uuid.UUID, name: SeismogramParameter\n) -&gt; bool | datetime:\n    \"\"\"Get parameter value from an AimbatSeismogram by ID.\n\n    Parameters:\n        session: Database session.\n        seismogram_id: Seismogram ID.\n        name: Name of the parameter value to return.\n\n    Returns:\n        Seismogram parameter value.\n\n    Raises:\n        ValueError: If no AimbatSeismogram is found with the given ID.\n    \"\"\"\n\n    logger.info(f\"Getting seismogram {name=} for seismogram with id={seismogram_id}.\")\n\n    aimbat_seismogram = session.get(AimbatSeismogram, seismogram_id)\n\n    if aimbat_seismogram is None:\n        raise ValueError(f\"No AimbatSeismogram found with {seismogram_id=}\")\n\n    return get_seismogram_parameter(aimbat_seismogram, name)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter_by_id(seismogram_id)","title":"<code>seismogram_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.get_seismogram_parameter_by_id(name)","title":"<code>name</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.get_selected_seismograms","title":"get_selected_seismograms","text":"<pre><code>get_selected_seismograms(\n    session: Session, all_events: bool = False\n) -&gt; Sequence[AimbatSeismogram]\n</code></pre> <p>Get the selected seismograms for the active avent.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>bool</code> <p>Get the selected seismograms for all events.</p> <code>False</code> <p>Returns: Selected seismograms.</p> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def get_selected_seismograms(\n    session: Session, all_events: bool = False\n) -&gt; Sequence[AimbatSeismogram]:\n    \"\"\"Get the selected seismograms for the active avent.\n\n    Parameters:\n        session: Database session.\n        all_events: Get the selected seismograms for all events.\n\n    Returns: Selected seismograms.\n    \"\"\"\n\n    logger.info(\"Getting selected AIMBAT seismograms.\")\n\n    if all_events is True:\n        logger.debug(\"Selecting seismograms for all events.\")\n        select_seismograms = (\n            select(AimbatSeismogram)\n            .join(AimbatSeismogramParameters)\n            .where(AimbatSeismogramParameters.select == 1)\n        )\n    else:\n        logger.debug(\"Selecting seismograms for active event only.\")\n        select_seismograms = (\n            select(AimbatSeismogram)\n            .join(AimbatSeismogramParameters)\n            .join(AimbatEvent)\n            .where(AimbatSeismogramParameters.select == 1)\n            .where(AimbatEvent.active == 1)\n        )\n\n    seismograms = session.exec(select_seismograms).all()\n\n    logger.debug(f\"Found {len(seismograms)} selected seismograms.\")\n\n    return seismograms\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.get_selected_seismograms(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.get_selected_seismograms(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.plot_seismograms","title":"plot_seismograms","text":"<pre><code>plot_seismograms(\n    use_qt: bool = False,\n) -&gt; Figure | PlotWidget\n</code></pre> <p>Plot all seismograms for a particular event ordered by great circle distance.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Plot with pqtgraph instead of pyplot</p> <code>False</code> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def plot_seismograms(use_qt: bool = False) -&gt; Figure | PlotWidget:\n    \"\"\"Plot all seismograms for a particular event ordered by great circle distance.\n\n    Parameters:\n        use_qt: Plot with pqtgraph instead of pyplot\n    \"\"\"\n\n    with Session(engine) as session:\n        active_event = event.get_active_event(session)\n\n        if active_event is None:\n            raise RuntimeError(\"No active event set.\")\n\n        seismograms = active_event.seismograms\n\n        if len(seismograms) == 0:\n            raise RuntimeError(\"No seismograms found in active event.\")\n\n        distance_dict = {\n            seismogram.id: distance(seismogram.station, seismogram.event) / 1000\n            for seismogram in seismograms\n        }\n        distance_min = min(distance_dict.values())\n        distance_max = max(distance_dict.values())\n        scaling_factor = (distance_max - distance_min) / len(seismograms) * 5\n\n        title = seismograms[0].event.time.strftime(\"Event %Y-%m-%d %H:%M:%S\")\n        xlabel = \"Time of day\"\n        ylabel = \"Epicentral distance [km]\"\n\n        plot_widget = None\n        if use_qt:\n            if check_for_notebook():\n                plot_widget = PlotWidget(width=200)\n            else:\n                plot_widget = pg.plot(title=title)\n            axis = pg.DateAxisItem()\n            plot_widget.setAxisItems({\"bottom\": axis})\n            plot_widget.setLabel(\"bottom\", xlabel)\n            plot_widget.setLabel(\"left\", ylabel)\n        else:\n            fig, ax = plt.subplots()\n\n        for seismogram in seismograms:\n            clone = clone_to_mini(MiniSeismogram, seismogram)\n            detrend(clone)\n            normalize(clone)\n            plot_data = clone.data * scaling_factor + distance_dict[seismogram.id]\n            if use_qt and plot_widget is not None:\n                times = unix_time_array(clone)\n                plot_widget.plot(times, plot_data)\n            else:\n                times = time_array(clone)\n                ax.plot(\n                    times,\n                    plot_data,\n                    scalex=True,\n                    scaley=True,\n                )\n        if use_qt and isinstance(plot_widget, PlotWidget):\n            return plot_widget\n        elif not use_qt:\n            plt.xlabel(xlabel=xlabel)\n            plt.ylabel(ylabel=ylabel)\n            plt.gcf().autofmt_xdate()\n            fmt = mdates.DateFormatter(\"%H:%M:%S\")\n            plt.gca().xaxis.set_major_formatter(fmt)\n            plt.title(title)\n            plt.show()\n        return fig\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.plot_seismograms(use_qt)","title":"<code>use_qt</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.print_seismogram_table","title":"print_seismogram_table","text":"<pre><code>print_seismogram_table(\n    short: bool, all_events: bool = False\n) -&gt; None\n</code></pre> <p>Prints a pretty table with AIMBAT seismograms.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Shorten and format the output to be more human-readable.</p> required <code>bool</code> <p>Print seismograms for all events.</p> <code>False</code> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def print_seismogram_table(short: bool, all_events: bool = False) -&gt; None:\n    \"\"\"Prints a pretty table with AIMBAT seismograms.\n\n    Parameters:\n        short: Shorten and format the output to be more human-readable.\n        all_events: Print seismograms for all events.\n    \"\"\"\n\n    logger.info(\"Printing AIMBAT seismogram table.\")\n\n    title = \"AIMBAT seismograms for all events\"\n    seismograms = None\n\n    with Session(engine) as session:\n        if all_events:\n            logger.debug(\"Selecting seismograms for all events.\")\n            seismograms = session.exec(select(AimbatSeismogram)).all()\n        else:\n            logger.debug(\"Selecting seismograms for active event only.\")\n            active_event = event.get_active_event(session)\n            seismograms = active_event.seismograms\n            if short:\n                title = f\"AIMBAT seismograms for event {active_event.time.strftime('%Y-%m-%d %H:%M:%S')} (ID={event.uuid_shortener(session, active_event)})\"\n            else:\n                title = f\"AIMBAT seismograms for event {active_event.time} (ID={active_event.id})\"\n\n        logger.debug(f\"Found {len(seismograms)} seismograms for the table.\")\n\n        table = make_table(title=title)\n        table.add_column(\n            \"ID (shortened)\" if short else \"ID\",\n            justify=\"center\",\n            style=TABLE_STYLING.id,\n            no_wrap=True,\n        )\n        table.add_column(\n            \"Selected\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True\n        )\n        table.add_column(\n            \"NPTS\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True\n        )\n        table.add_column(\n            \"Delta\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True\n        )\n        table.add_column(\n            \"Data ID\", justify=\"center\", style=TABLE_STYLING.linked, no_wrap=True\n        )\n        table.add_column(\"Station ID\", justify=\"center\", style=TABLE_STYLING.linked)\n        table.add_column(\"Station Name\", justify=\"center\", style=TABLE_STYLING.linked)\n        if all_events:\n            table.add_column(\"Event ID\", justify=\"center\", style=TABLE_STYLING.linked)\n\n        for seismogram in seismograms:\n            logger.debug(f\"Adding seismogram with ID {seismogram.id} to the table.\")\n            row = [\n                (uuid_shortener(session, seismogram) if short else str(seismogram.id)),\n                TABLE_STYLING.bool_formatter(seismogram.parameters.select),\n                str(len(seismogram)),\n                str(seismogram.delta.total_seconds()),\n                (\n                    uuid_shortener(session, seismogram.datasource)\n                    if short\n                    else str(seismogram.datasource.id)\n                ),\n                (\n                    uuid_shortener(session, seismogram.station)\n                    if short\n                    else str(seismogram.station.id)\n                ),\n                f\"{seismogram.station.name} - {seismogram.station.network}\",\n            ]\n\n            if all_events:\n                row.append(\n                    uuid_shortener(session, seismogram.event)\n                    if short\n                    else str(seismogram.event.id)\n                )\n            table.add_row(*row)\n\n    console = Console()\n    console.print(table)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.print_seismogram_table(short)","title":"<code>short</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.print_seismogram_table(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter","title":"set_seismogram_parameter","text":"<pre><code>set_seismogram_parameter(\n    session: Session,\n    seismogram: AimbatSeismogram,\n    name: SeismogramParameter,\n    value: datetime | bool | str,\n) -&gt; None\n</code></pre> <p>Set parameter value for an AimbatSeismogram instance.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session</p> required <code>AimbatSeismogram</code> <p>Seismogram to set parameter for.</p> required <code>SeismogramParameter</code> <p>Name of the parameter.</p> required <code>datetime | bool | str</code> <p>Value to set parameter to.</p> required Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def set_seismogram_parameter(\n    session: Session,\n    seismogram: AimbatSeismogram,\n    name: SeismogramParameter,\n    value: datetime | bool | str,\n) -&gt; None:\n    \"\"\"Set parameter value for an AimbatSeismogram instance.\n\n    Parameters:\n        session: Database session\n        seismogram: Seismogram to set parameter for.\n        name: Name of the parameter.\n        value: Value to set parameter to.\n\n    \"\"\"\n\n    logger.info(f\"Setting seismogram {name=} to {value=} in {seismogram=}.\")\n\n    parameters = AimbatSeismogramParametersBase.model_validate(\n        seismogram.parameters, update={name: value}\n    )\n    setattr(seismogram.parameters, name, getattr(parameters, name))\n    session.add(seismogram)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter(seismogram)","title":"<code>seismogram</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter(name)","title":"<code>name</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter(value)","title":"<code>value</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter_by_id","title":"set_seismogram_parameter_by_id","text":"<pre><code>set_seismogram_parameter_by_id(\n    session: Session,\n    seismogram_id: UUID,\n    name: SeismogramParameter,\n    value: datetime | bool | str,\n) -&gt; None\n</code></pre> <p>Set parameter value for an AimbatSeismogram by ID.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session</p> required <code>UUID</code> <p>Seismogram id.</p> required <code>SeismogramParameter</code> <p>Name of the parameter.</p> required <code>datetime | bool | str</code> <p>Value to set.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If no AimbatSeismogram is found with the given ID.</p> Source code in <code>aimbat/lib/seismogram.py</code> <pre><code>def set_seismogram_parameter_by_id(\n    session: Session,\n    seismogram_id: uuid.UUID,\n    name: SeismogramParameter,\n    value: datetime | bool | str,\n) -&gt; None:\n    \"\"\"Set parameter value for an AimbatSeismogram by ID.\n\n    Parameters:\n        session: Database session\n        seismogram_id: Seismogram id.\n        name: Name of the parameter.\n        value: Value to set.\n\n    Raises:\n        ValueError: If no AimbatSeismogram is found with the given ID.\n    \"\"\"\n\n    logger.info(\n        f\"Setting seismogram {name=} to {value=} for seismogram with id={seismogram_id}.\"\n    )\n\n    aimbat_seismogram = session.get(AimbatSeismogram, seismogram_id)\n\n    if aimbat_seismogram is None:\n        raise ValueError(f\"No AimbatSeismogram found with {seismogram_id=}\")\n\n    set_seismogram_parameter(session, aimbat_seismogram, name, value)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter_by_id(seismogram_id)","title":"<code>seismogram_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter_by_id(name)","title":"<code>name</code>","text":""},{"location":"reference/lib/#aimbat.lib.seismogram.set_seismogram_parameter_by_id(value)","title":"<code>value</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot","title":"snapshot","text":"<p>Functions:</p> Name Description <code>create_snapshot</code> <p>Create a snapshot of the AIMBAT processing parameters.</p> <code>delete_snapshot</code> <p>Delete an AIMBAT parameter snapshot.</p> <code>delete_snapshot_by_id</code> <p>Delete an AIMBAT parameter snapshot.</p> <code>get_snapshots</code> <p>Get the snapshots for the active avent.</p> <code>print_snapshot_table</code> <p>Print a pretty table with AIMBAT snapshots.</p> <code>rollback_to_snapshot</code> <p>Rollback to an AIMBAT parameters snapshot.</p> <code>rollback_to_snapshot_by_id</code> <p>Rollback to an AIMBAT parameters snapshot.</p>"},{"location":"reference/lib/#aimbat.lib.snapshot.create_snapshot","title":"create_snapshot","text":"<pre><code>create_snapshot(\n    session: Session, comment: str | None = None\n) -&gt; None\n</code></pre> <p>Create a snapshot of the AIMBAT processing parameters.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>str | None</code> <p>Optional comment.</p> <code>None</code> Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def create_snapshot(session: Session, comment: str | None = None) -&gt; None:\n    \"\"\"Create a snapshot of the AIMBAT processing parameters.\n\n    Parameters:\n        session: Database session.\n        comment: Optional comment.\n    \"\"\"\n    active_aimbat_event = event.get_active_event(session)\n\n    logger.info(\n        f\"Creating snapshot for event with id={active_aimbat_event.id} with {comment=}.\"\n    )\n\n    event_parameters_snapshot = AimbatEventParametersSnapshot.model_validate(\n        active_aimbat_event.parameters,\n        update={\n            \"id\": uuid.uuid4(),  # we don't want to carry over the id from the active parameters\n            \"parameters_id\": active_aimbat_event.parameters.id,\n        },\n    )\n    logger.debug(\n        f\"Adding event parameters snapshot with id={event_parameters_snapshot.id} to snapshot.\"\n    )\n\n    seismogram_parameter_snapshots = []\n    for aimbat_seismogram in active_aimbat_event.seismograms:\n        seismogram_parameter_snapshot = AimbatSeismogramParametersSnapshot.model_validate(\n            aimbat_seismogram.parameters,\n            update={\n                \"id\": uuid.uuid4(),  # we don't want to carry over the id from the active parameters\n                \"seismogram_parameters_id\": aimbat_seismogram.parameters.id,\n            },\n        )\n        logger.debug(\n            f\"Adding seismogram parameters snapshot with id={seismogram_parameter_snapshot.id} to snapshot.\"\n        )\n        seismogram_parameter_snapshots.append(seismogram_parameter_snapshot)\n\n    aimbat_snapshot = AimbatSnapshot(\n        event=active_aimbat_event,\n        event_parameters_snapshot=event_parameters_snapshot,\n        seismogram_parameters_snapshots=seismogram_parameter_snapshots,\n        comment=comment,\n    )\n    session.add(aimbat_snapshot)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.create_snapshot(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.create_snapshot(comment)","title":"<code>comment</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.delete_snapshot","title":"delete_snapshot","text":"<pre><code>delete_snapshot(\n    session: Session, snapshot: AimbatSnapshot\n) -&gt; None\n</code></pre> <p>Delete an AIMBAT parameter snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>AimbatSnapshot</code> <p>Snapshot.</p> required Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def delete_snapshot(session: Session, snapshot: AimbatSnapshot) -&gt; None:\n    \"\"\"Delete an AIMBAT parameter snapshot.\n\n    Parameters:\n        session: Database session.\n        snapshot: Snapshot.\n    \"\"\"\n\n    logger.info(f\"Deleting snapshot {snapshot.id}.\")\n\n    session.delete(snapshot)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.delete_snapshot(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.delete_snapshot(snapshot)","title":"<code>snapshot</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.delete_snapshot_by_id","title":"delete_snapshot_by_id","text":"<pre><code>delete_snapshot_by_id(\n    session: Session, snapshot_id: UUID\n) -&gt; None\n</code></pre> <p>Delete an AIMBAT parameter snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>UUID</code> <p>Snapshot id.</p> required Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def delete_snapshot_by_id(session: Session, snapshot_id: uuid.UUID) -&gt; None:\n    \"\"\"Delete an AIMBAT parameter snapshot.\n\n    Parameters:\n        session: Database session.\n        snapshot_id: Snapshot id.\n    \"\"\"\n\n    logger.debug(f\"Searching for snapshot with id {snapshot_id}.\")\n\n    snapshot = session.get(AimbatSnapshot, snapshot_id)\n\n    if snapshot is None:\n        raise ValueError(\n            f\"Unable to delete snapshot: snapshot with id={snapshot_id} not found.\"\n        )\n\n    delete_snapshot(session, snapshot)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.delete_snapshot_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.delete_snapshot_by_id(snapshot_id)","title":"<code>snapshot_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.get_snapshots","title":"get_snapshots","text":"<pre><code>get_snapshots(\n    session: Session, all_events: bool = False\n) -&gt; Sequence[AimbatSnapshot]\n</code></pre> <p>Get the snapshots for the active avent.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>bool</code> <p>Get the selected snapshots for all events.</p> <code>False</code> <p>Returns: Snapshots.</p> Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def get_snapshots(\n    session: Session, all_events: bool = False\n) -&gt; Sequence[AimbatSnapshot]:\n    \"\"\"Get the snapshots for the active avent.\n\n    Parameters:\n        session: Database session.\n        all_events: Get the selected snapshots for all events.\n\n    Returns: Snapshots.\n    \"\"\"\n\n    logger.info(\"Getting AIMBAT snapshots.\")\n\n    if all_events:\n        logger.debug(\"Getting snapshots for all events.\")\n        return session.exec(select(AimbatSnapshot)).all()\n\n    logger.debug(\"Getting snapshots for active event.\")\n    select_active_event_snapshots = (\n        select(AimbatSnapshot)\n        .join(AimbatEventParametersSnapshot)\n        .join(AimbatEventParameters)\n        .join(AimbatEvent)\n        .where(AimbatEvent.active == 1)\n    )\n    return session.exec(select_active_event_snapshots).all()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.get_snapshots(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.get_snapshots(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.print_snapshot_table","title":"print_snapshot_table","text":"<pre><code>print_snapshot_table(short: bool, all_events: bool) -&gt; None\n</code></pre> <p>Print a pretty table with AIMBAT snapshots.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Shorten and format the output to be more human-readable.</p> required <code>bool</code> <p>Print all snapshots instead of limiting to the active event.</p> required Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def print_snapshot_table(short: bool, all_events: bool) -&gt; None:\n    \"\"\"Print a pretty table with AIMBAT snapshots.\n\n    Parameters:\n        short: Shorten and format the output to be more human-readable.\n        all_events: Print all snapshots instead of limiting to the active event.\n    \"\"\"\n\n    logger.info(\"Printing AIMBAT snapshots table.\")\n\n    title = \"AIMBAT snapshots for all events\"\n\n    with Session(engine) as session:\n        snapshots = get_snapshots(session, all_events)\n        logger.debug(f\"Found {len(snapshots)} snapshots for the table.\")\n\n        if not all_events:\n            active_event = event.get_active_event(session)\n            if short:\n                title = f\"AIMBAT snapshots for event {active_event.time.strftime('%Y-%m-%d %H:%M:%S')} (ID={uuid_shortener(session, active_event)})\"\n            else:\n                title = f\"AIMBAT snapshots for event {active_event.time} (ID={active_event.id})\"\n\n        table = make_table(title=title)\n\n        table.add_column(\n            \"ID (shortened)\" if short else \"ID\",\n            justify=\"center\",\n            style=TABLE_STYLING.id,\n            no_wrap=True,\n        )\n        table.add_column(\n            \"Date &amp; Time\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True\n        )\n        table.add_column(\"Comment\", justify=\"center\", style=TABLE_STYLING.mine)\n        table.add_column(\"# Seismograms\", justify=\"center\", style=TABLE_STYLING.linked)\n        if all_events:\n            table.add_column(\"Event ID\", justify=\"center\", style=TABLE_STYLING.linked)\n\n        for snapshot in snapshots:\n            logger.debug(f\"Adding snapshot with id={snapshot.id} to the table.\")\n            row = [\n                (uuid_shortener(session, snapshot) if short else str(snapshot.id)),\n                TABLE_STYLING.datetime_formatter(snapshot.date, short),\n                str(snapshot.comment),\n                str(len(snapshot.seismogram_parameters_snapshots)),\n            ]\n            if all_events:\n                aimbat_event = snapshot.event\n                row.append(\n                    uuid_shortener(session, aimbat_event)\n                    if short\n                    else str(aimbat_event.id)\n                )\n            table.add_row(*row)\n\n    console = Console()\n    console.print(table)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.print_snapshot_table(short)","title":"<code>short</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.print_snapshot_table(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.rollback_to_snapshot","title":"rollback_to_snapshot","text":"<pre><code>rollback_to_snapshot(\n    session: Session, snapshot: AimbatSnapshot\n) -&gt; None\n</code></pre> <p>Rollback to an AIMBAT parameters snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>AimbatSnapshot</code> <p>Snapshot.</p> required Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def rollback_to_snapshot(session: Session, snapshot: AimbatSnapshot) -&gt; None:\n    \"\"\"Rollback to an AIMBAT parameters snapshot.\n\n    Parameters:\n        snapshot: Snapshot.\n    \"\"\"\n\n    logger.info(f\"Rolling back to snapshot with id={snapshot.id}.\")\n\n    # create object with just the parameters\n    rollback_event_parameters = AimbatEventParametersBase.model_validate(\n        snapshot.event_parameters_snapshot\n    )\n    logger.debug(\n        f\"Using event parameters snapshot with id={snapshot.event_parameters_snapshot.id} for rollback.\"\n    )\n    current_event_parameters = snapshot.event.parameters\n    # setting attributes explicitly brings them into the session\n    for k, v in rollback_event_parameters.model_dump().items():\n        setattr(current_event_parameters, k, v)\n\n    session.add(current_event_parameters)\n\n    for seismogram_parameters_snapshot in snapshot.seismogram_parameters_snapshots:\n        # create object with just the parameters\n        rollback_seismogram_parameters = AimbatSeismogramParametersBase.model_validate(\n            seismogram_parameters_snapshot\n        )\n        logger.debug(\n            f\"Using seismogram parameters snapshot with id={seismogram_parameters_snapshot.id} for rollback.\"\n        )\n        # setting attributes explicitly brings them into the session\n        current_seismogram_parameters = seismogram_parameters_snapshot.parameters\n        for parameter, value in rollback_seismogram_parameters.model_dump().items():\n            setattr(current_seismogram_parameters, parameter, value)\n        session.add(current_seismogram_parameters)\n\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.rollback_to_snapshot(snapshot)","title":"<code>snapshot</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.rollback_to_snapshot_by_id","title":"rollback_to_snapshot_by_id","text":"<pre><code>rollback_to_snapshot_by_id(\n    session: Session, snapshot_id: UUID\n) -&gt; None\n</code></pre> <p>Rollback to an AIMBAT parameters snapshot.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>UUID</code> <p>Snapshot id.</p> required Source code in <code>aimbat/lib/snapshot.py</code> <pre><code>def rollback_to_snapshot_by_id(session: Session, snapshot_id: uuid.UUID) -&gt; None:\n    \"\"\"Rollback to an AIMBAT parameters snapshot.\n\n    Parameters:\n        session: Database session.\n        snapshot_id: Snapshot id.\n    \"\"\"\n\n    logger.info(f\"Deleting snapshot with id={snapshot_id}.\")\n\n    snapshot = session.get(AimbatSnapshot, snapshot_id)\n\n    if snapshot is None:\n        raise ValueError(\n            f\"Unable to delete snapshot: snapshot with id={snapshot_id} not found.\"\n        )\n\n    rollback_to_snapshot(session, snapshot)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.snapshot.rollback_to_snapshot_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.snapshot.rollback_to_snapshot_by_id(snapshot_id)","title":"<code>snapshot_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.station","title":"station","text":"<p>Functions:</p> Name Description <code>delete_station</code> <p>Delete an AimbatStation from the database.</p> <code>delete_station_by_id</code> <p>Delete an AimbatStation from the database by ID.</p> <code>dump_station_table</code> <p>Dump the table data to json.</p> <code>get_stations_in_event</code> <p>Get the stations for a particular event.</p> <code>print_station_table</code> <p>Prints a pretty table with AIMBAT stations.</p>"},{"location":"reference/lib/#aimbat.lib.station.delete_station","title":"delete_station","text":"<pre><code>delete_station(\n    session: Session, station: AimbatStation\n) -&gt; None\n</code></pre> <p>Delete an AimbatStation from the database.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>AimbatStation</code> <p>Station to delete.</p> required Source code in <code>aimbat/lib/station.py</code> <pre><code>def delete_station(session: Session, station: AimbatStation) -&gt; None:\n    \"\"\"Delete an AimbatStation from the database.\n\n    Parameters:\n        session: Database session.\n        station: Station to delete.\n    \"\"\"\n\n    logger.info(f\"Deleting station {station.id}.\")\n\n    session.delete(station)\n    session.commit()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.station.delete_station(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.delete_station(station)","title":"<code>station</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.delete_station_by_id","title":"delete_station_by_id","text":"<pre><code>delete_station_by_id(\n    session: Session, station_id: UUID\n) -&gt; None\n</code></pre> <p>Delete an AimbatStation from the database by ID.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>UUID</code> <p>Station ID.</p> required <p>Raises:</p> Type Description <code>NoResultFound</code> <p>If no AimbatStation is found with the given ID.</p> Source code in <code>aimbat/lib/station.py</code> <pre><code>def delete_station_by_id(session: Session, station_id: uuid.UUID) -&gt; None:\n    \"\"\"Delete an AimbatStation from the database by ID.\n\n    Parameters:\n        session: Database session.\n        station_id: Station ID.\n\n    Raises:\n        NoResultFound: If no AimbatStation is found with the given ID.\n    \"\"\"\n\n    logger.debug(f\"Getting station with id={station_id}.\")\n\n    station = session.get(AimbatStation, station_id)\n    if station is None:\n        raise NoResultFound(f\"No AimbatStation found with {station_id=}\")\n    delete_station(session, station)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.station.delete_station_by_id(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.delete_station_by_id(station_id)","title":"<code>station_id</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.dump_station_table","title":"dump_station_table","text":"<pre><code>dump_station_table() -&gt; None\n</code></pre> <p>Dump the table data to json.</p> Source code in <code>aimbat/lib/station.py</code> <pre><code>def dump_station_table() -&gt; None:\n    \"\"\"Dump the table data to json.\"\"\"\n\n    logger.info(\"Dumping AIMBAT station table to json.\")\n\n    with Session(engine) as session:\n        aimbat_stations = session.exec(select(AimbatStation)).all()\n        dump_to_json(aimbat_stations)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.station.get_stations_in_event","title":"get_stations_in_event","text":"<pre><code>get_stations_in_event(\n    session: Session, event: AimbatEvent\n) -&gt; Sequence[AimbatStation]\n</code></pre> <p>Get the stations for a particular event.</p> <p>Parameters:</p> Name Type Description Default <code>Session</code> <p>Database session.</p> required <code>AimbatEvent</code> <p>Event to return stations for.</p> required <p>Returns: Stations in event.</p> Source code in <code>aimbat/lib/station.py</code> <pre><code>def get_stations_in_event(\n    session: Session, event: AimbatEvent\n) -&gt; Sequence[AimbatStation]:\n    \"\"\"Get the stations for a particular event.\n\n    Parameters:\n        session: Database session.\n        event: Event to return stations for.\n\n    Returns: Stations in event.\n    \"\"\"\n\n    logger.info(f\"Getting stations for event: {event.id}.\")\n\n    select_stations = (\n        select(AimbatStation)\n        .join(AimbatSeismogram)\n        .join(AimbatEvent)\n        .where(AimbatEvent.id == event.id)\n    )\n\n    stations = session.exec(select_stations).all()\n\n    logger.debug(f\"Found {len(stations)}.\")\n\n    return stations\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.station.get_stations_in_event(session)","title":"<code>session</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.get_stations_in_event(event)","title":"<code>event</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.print_station_table","title":"print_station_table","text":"<pre><code>print_station_table(\n    short: bool, all_events: bool = False\n) -&gt; None\n</code></pre> <p>Prints a pretty table with AIMBAT stations.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Shorten and format the output to be more human-readable.</p> required <code>bool</code> <p>Print stations for all events.</p> <code>False</code> Source code in <code>aimbat/lib/station.py</code> <pre><code>def print_station_table(short: bool, all_events: bool = False) -&gt; None:\n    \"\"\"Prints a pretty table with AIMBAT stations.\n\n    Parameters:\n        short: Shorten and format the output to be more human-readable.\n        all_events: Print stations for all events.\n    \"\"\"\n\n    logger.info(\"Printing station table.\")\n\n    title = \"AIMBAT stations for all events\"\n    aimbat_stations = None\n\n    with Session(engine) as session:\n        if all_events:\n            logger.debug(\"Selecting all AIMBAT stations.\")\n            aimbat_stations = session.exec(select(AimbatStation)).all()\n        else:\n            logger.debug(\"Selecting AIMBAT stations for active event.\")\n            active_event = event.get_active_event(session)\n            aimbat_stations = get_stations_in_event(session, active_event)\n            if short:\n                title = f\"AIMBAT stations for event {active_event.time.strftime('%Y-%m-%d %H:%M:%S')} (ID={uuid_shortener(session, active_event)})\"\n            else:\n                title = f\"AIMBAT stations for event {active_event.time} (ID={active_event.id})\"\n        logger.debug(\"Found {len(aimbat_stations)} stations for the table.\")\n\n        table = make_table(title=title)\n\n        table.add_column(\n            \"ID (shortened)\" if short else \"ID\",\n            justify=\"center\",\n            style=TABLE_STYLING.id,\n            no_wrap=True,\n        )\n        table.add_column(\n            \"Name &amp; Network\", justify=\"center\", style=TABLE_STYLING.mine, no_wrap=True\n        )\n        table.add_column(\"Channel\", justify=\"center\", style=TABLE_STYLING.mine)\n        table.add_column(\"Location\", justify=\"center\", style=TABLE_STYLING.mine)\n        table.add_column(\"Latitude\", justify=\"center\", style=TABLE_STYLING.mine)\n        table.add_column(\"Longitude\", justify=\"center\", style=TABLE_STYLING.mine)\n        table.add_column(\"Elevation\", justify=\"center\", style=TABLE_STYLING.mine)\n        if all_events:\n            table.add_column(\n                \"# Seismograms\", justify=\"center\", style=TABLE_STYLING.linked\n            )\n            table.add_column(\"# Events\", justify=\"center\", style=TABLE_STYLING.linked)\n\n        for aimbat_station in aimbat_stations:\n            logger.debug(f\"Adding {aimbat_station.name} to the table.\")\n            row = [\n                (\n                    uuid_shortener(session, aimbat_station)\n                    if short\n                    else str(aimbat_station.id)\n                ),\n                f\"{aimbat_station.name} - {aimbat_station.network}\",\n                f\"{aimbat_station.channel}\",\n                f\"{aimbat_station.location}\",\n                (\n                    f\"{aimbat_station.latitude:.3f}\"\n                    if short\n                    else str(aimbat_station.latitude)\n                ),\n                (\n                    f\"{aimbat_station.longitude:.3f}\"\n                    if short\n                    else str(aimbat_station.longitude)\n                ),\n                (\n                    f\"{aimbat_station.elevation:.0f}\"\n                    if short\n                    else str(aimbat_station.elevation)\n                ),\n            ]\n            if all_events:\n                row.extend(\n                    [\n                        str(len(aimbat_station.seismograms)),\n                        str(len({i.event_id for i in aimbat_station.seismograms})),\n                    ]\n                )\n            table.add_row(*row)\n\n    console = Console()\n    console.print(table)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.station.print_station_table(short)","title":"<code>short</code>","text":""},{"location":"reference/lib/#aimbat.lib.station.print_station_table(all_events)","title":"<code>all_events</code>","text":""},{"location":"reference/lib/#aimbat.lib.typing","title":"typing","text":"<p>Custom types used in AIMBAT.</p> <p>Classes:</p> Name Description <code>EventParameter</code> <p><code>AimbatEvent</code> enum class for typing.</p> <code>SeismogramParameter</code> <p><code>AimbatSeismograParameters</code> enum class for typing.</p> <p>Attributes:</p> Name Type Description <code>EventParameterBool</code> <code>TypeAlias</code> <p><code>TypeAlias</code> for <code>AimbatEvent</code> attributes with <code>bool</code> values.</p> <code>EventParameterFloat</code> <code>TypeAlias</code> <p><code>TypeAlias</code> for <code>AimbatEvent</code> attributes with <code>float</code> values.</p> <code>EventParameterTimedelta</code> <code>TypeAlias</code> <p><code>TypeAlias</code> for <code>AimbatEvent</code> attributes with <code>timedelta</code> values.</p>"},{"location":"reference/lib/#aimbat.lib.typing.EventParameterBool","title":"EventParameterBool  <code>module-attribute</code>","text":"<pre><code>EventParameterBool: TypeAlias = Literal[COMPLETED]\n</code></pre> <p><code>TypeAlias</code> for <code>AimbatEvent</code> attributes with <code>bool</code> values.</p>"},{"location":"reference/lib/#aimbat.lib.typing.EventParameterFloat","title":"EventParameterFloat  <code>module-attribute</code>","text":"<pre><code>EventParameterFloat: TypeAlias = Literal[MIN_CCNORM]\n</code></pre> <p><code>TypeAlias</code> for <code>AimbatEvent</code> attributes with <code>float</code> values.</p>"},{"location":"reference/lib/#aimbat.lib.typing.EventParameterTimedelta","title":"EventParameterTimedelta  <code>module-attribute</code>","text":"<pre><code>EventParameterTimedelta: TypeAlias = Literal[\n    WINDOW_PRE, WINDOW_POST\n]\n</code></pre> <p><code>TypeAlias</code> for <code>AimbatEvent</code> attributes with <code>timedelta</code> values.</p>"},{"location":"reference/lib/#aimbat.lib.typing.EventParameter","title":"EventParameter","text":"<p>               Bases: <code>StrEnum</code></p> <p><code>AimbatEvent</code> enum class for typing.</p> <p>This enum class is used for typing, cli args etc. The attributes must be the same as in the <code>AimbatEvent</code> model.</p> Source code in <code>aimbat/lib/typing.py</code> <pre><code>class EventParameter(StrEnum):\n    \"\"\"[`AimbatEvent`][aimbat.lib.models.AimbatEvent] enum class for typing.\n\n    This enum class is used for typing, cli args etc. The attributes must be\n    the same as in the [`AimbatEvent`][aimbat.lib.models.AimbatEvent] model.\n    \"\"\"\n\n    COMPLETED = auto()\n    MIN_CCNORM = auto()\n    WINDOW_PRE = auto()\n    WINDOW_POST = auto()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.typing.SeismogramParameter","title":"SeismogramParameter","text":"<p>               Bases: <code>StrEnum</code></p> <p><code>AimbatSeismograParameters</code> enum class for typing.</p> <p>This enum class is used for typing, cli args etc. The attributes must be the same as in the [<code>AimbatParameters</code>][aimbat.lib.models.AimbatParameters] model.</p> Source code in <code>aimbat/lib/typing.py</code> <pre><code>class SeismogramParameter(StrEnum):\n    \"\"\"[`AimbatSeismograParameters`][aimbat.lib.models.AimbatSeismogramParameters] enum class for typing.\n\n    This enum class is used for typing, cli args etc. The attributes must be\n    the same as in the [`AimbatParameters`][aimbat.lib.models.AimbatParameters] model.\n    \"\"\"\n\n    SELECT = auto()\n    FLIP = auto()\n    T1 = auto()\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.utils","title":"utils","text":"<p>Modules:</p> Name Description <code>checkdata</code> <code>sampledata</code>"},{"location":"reference/lib/#aimbat.lib.utils.checkdata","title":"checkdata","text":"<p>Functions:</p> Name Description <code>checkdata_event</code> <p>Check if event information is complete.</p> <code>checkdata_seismogram</code> <p>Check if seismogram information is complete.</p> <code>checkdata_station</code> <p>Check if station information is complete.</p> <code>run_checks</code> <p>Run all checks on one or more SAC files.</p>"},{"location":"reference/lib/#aimbat.lib.utils.checkdata.checkdata_event","title":"checkdata_event","text":"<pre><code>checkdata_event(event: Event) -&gt; list[str]\n</code></pre> <p>Check if event information is complete.</p> <p>Parameters:</p> Name Type Description Default <code>Event</code> <p>event object to test.</p> required Source code in <code>aimbat/lib/utils/checkdata.py</code> <pre><code>def checkdata_event(event: Event) -&gt; list[str]:\n    \"\"\"Check if event information is complete.\n\n    Parameters:\n        event: event object to test.\n    \"\"\"\n\n    logger.info(\"Checking event information.\")\n\n    issues = list()\n\n    try:\n        assert event.latitude is not None\n    except (AssertionError, Exception):\n        issue = \"No event latitude found in file.\"\n        issues.append(issue)\n\n    try:\n        assert event.longitude is not None\n    except (AssertionError, Exception):\n        issue = \"No event longitude found in file.\"\n        issues.append(issue)\n\n    try:\n        assert event.time is not None\n    except (AssertionError, Exception):\n        issue = \"No event time found in file.\"\n        issues.append(issue)\n\n    return issues\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.utils.checkdata.checkdata_event(event)","title":"<code>event</code>","text":""},{"location":"reference/lib/#aimbat.lib.utils.checkdata.checkdata_seismogram","title":"checkdata_seismogram","text":"<pre><code>checkdata_seismogram(seismogram: Seismogram) -&gt; list[str]\n</code></pre> <p>Check if seismogram information is complete.</p> <p>Parameters:</p> Name Type Description Default <code>Seismogram</code> <p>seismogram object to test.</p> required Source code in <code>aimbat/lib/utils/checkdata.py</code> <pre><code>def checkdata_seismogram(seismogram: Seismogram) -&gt; list[str]:\n    \"\"\"Check if seismogram information is complete.\n\n    Parameters:\n        seismogram: seismogram object to test.\n    \"\"\"\n\n    logger.info(\"Checking seismogram information.\")\n\n    issues = list()\n    try:\n        assert seismogram.data is not None\n        assert len(seismogram.data) &gt; 0\n    except (AssertionError, Exception):\n        issue = \"No seismogram data found in file.\"\n        issues.append(issue)\n\n    return issues\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.utils.checkdata.checkdata_seismogram(seismogram)","title":"<code>seismogram</code>","text":""},{"location":"reference/lib/#aimbat.lib.utils.checkdata.checkdata_station","title":"checkdata_station","text":"<pre><code>checkdata_station(station: Station) -&gt; list[str]\n</code></pre> <p>Check if station information is complete.</p> <p>Parameters:</p> Name Type Description Default <code>Station</code> <p>station object to test.</p> required Source code in <code>aimbat/lib/utils/checkdata.py</code> <pre><code>def checkdata_station(station: Station) -&gt; list[str]:\n    \"\"\"Check if station information is complete.\n\n    Parameters:\n        station: station object to test.\n    \"\"\"\n\n    logger.info(\"Checking station information.\")\n\n    issues = list()\n\n    try:\n        assert station.name is not None\n    except (AssertionError, Exception):\n        issue = \"No station name found in file.\"\n        issues.append(issue)\n\n    try:\n        assert station.latitude is not None\n    except (AssertionError, Exception):\n        issue = \"No station latitude found in file.\"\n        issues.append(issue)\n\n    try:\n        assert station.longitude is not None\n    except (AssertionError, Exception):\n        issue = \"No station longitude found in file.\"\n        issues.append(issue)\n\n    return issues\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.utils.checkdata.checkdata_station(station)","title":"<code>station</code>","text":""},{"location":"reference/lib/#aimbat.lib.utils.checkdata.run_checks","title":"run_checks","text":"<pre><code>run_checks(sacfiles: list[Path]) -&gt; None\n</code></pre> <p>Run all checks on one or more SAC files.</p> <p>Parameters:</p> Name Type Description Default <code>list[Path]</code> <p>SAC files to test.</p> required Source code in <code>aimbat/lib/utils/checkdata.py</code> <pre><code>def run_checks(sacfiles: list[Path]) -&gt; None:\n    \"\"\"Run all checks on one or more SAC files.\n\n    Parameters:\n        sacfiles: SAC files to test.\n    \"\"\"\n\n    logger.info(\"Running all checks.\")\n\n    from pysmo.classes import SAC\n\n    def checkmark() -&gt; None:\n        print(\"\\N{CHECK MARK}\", end=\"\")\n\n    def crossmark() -&gt; None:\n        print(\"\\N{BALLOT X}\", end=\"\")\n\n    all_issues = dict()\n\n    for sacfile in sacfiles:\n        issues = list()\n        my_sac = SAC.from_file(str(sacfile))\n        print(f\"\\n{sacfile}: \", end=\"\")\n\n        station_issues = checkdata_station(my_sac.station)\n        if len(station_issues) == 0:\n            checkmark()\n        else:\n            issues.extend(station_issues)\n            crossmark()\n\n        event_issues = checkdata_event(my_sac.event)\n        if len(event_issues) == 0:\n            checkmark()\n        else:\n            issues.extend(event_issues)\n            crossmark()\n\n        seismogram_issues = checkdata_seismogram(my_sac.seismogram)\n        if len(seismogram_issues) == 0:\n            checkmark()\n        else:\n            issues.extend(seismogram_issues)\n            crossmark()\n\n        if len(issues) &gt; 0:\n            all_issues[sacfile] = issues\n\n    if len(all_issues) == 0:\n        print(\"\\n\\nNo issues found!\")\n        return\n\n    print(\"\\n\\nPlease fix the following issues before proceeding:\")\n    for sacfile, issues in all_issues.items():\n        print(f\"\\n file: {sacfile}:\")\n        for issue in issues:\n            print(f\"  - {issue}\")\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.utils.checkdata.run_checks(sacfiles)","title":"<code>sacfiles</code>","text":""},{"location":"reference/lib/#aimbat.lib.utils.sampledata","title":"sampledata","text":"<p>Functions:</p> Name Description <code>delete_sampledata</code> <p>Delete sample data.</p> <code>download_sampledata</code> <p>Download sample data.</p>"},{"location":"reference/lib/#aimbat.lib.utils.sampledata.delete_sampledata","title":"delete_sampledata","text":"<pre><code>delete_sampledata() -&gt; None\n</code></pre> <p>Delete sample data.</p> Source code in <code>aimbat/lib/utils/sampledata.py</code> <pre><code>def delete_sampledata() -&gt; None:\n    \"\"\"Delete sample data.\"\"\"\n\n    logger.info(f\"Deleting sample data in {settings.sampledata_dir}.\")\n\n    shutil.rmtree(settings.sampledata_dir)\n</code></pre>"},{"location":"reference/lib/#aimbat.lib.utils.sampledata.download_sampledata","title":"download_sampledata","text":"<pre><code>download_sampledata(force: bool = False) -&gt; None\n</code></pre> <p>Download sample data.</p> Source code in <code>aimbat/lib/utils/sampledata.py</code> <pre><code>def download_sampledata(force: bool = False) -&gt; None:\n    \"\"\"Download sample data.\"\"\"\n\n    logger.info(\n        f\"Downloading sample data from {settings.sampledata_src} to {settings.sampledata_dir}.\"\n    )\n\n    if (\n        settings.sampledata_dir.exists()\n        and len(os.listdir(settings.sampledata_dir)) != 0\n    ):\n        if force is True:\n            delete_sampledata()\n        else:\n            raise FileExistsError(\n                f\"The directory {settings.sampledata_dir} already exists and is non-empty.\"\n            )\n\n    with urlopen(settings.sampledata_src) as zipresp:\n        with ZipFile(BytesIO(zipresp.read())) as zfile:\n            zfile.extractall(settings.sampledata_dir)\n</code></pre>"},{"location":"source/conf/","title":"Conf","text":"<p>Configuration file for the Sphinx documentation builder.</p> <p>This file does only contain a selection of the most common options. For a full list see the documentation: http://www.sphinx-doc.org/en/master/config</p> <p>-- Path setup --------------------------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre># If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\n#\nimport os\nimport sys\nfrom importlib import reload\nimport pkg_resources\n</pre> # If extensions (or modules to document with autodoc) are in another directory, # add these directories to sys.path here. If the directory is relative to the # documentation root, use os.path.abspath to make it absolute, like shown here. # import os import sys from importlib import reload import pkg_resources In\u00a0[\u00a0]: Copied! <pre>pkg_resources = reload(\n    pkg_resources\n)  # This seems to be required to pick up the path defined above...\nsys.path.insert(0, os.path.abspath(\"../..\"))\n</pre> pkg_resources = reload(     pkg_resources )  # This seems to be required to pick up the path defined above... sys.path.insert(0, os.path.abspath(\"../..\")) <p>-- Project information -----------------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre>project = \"Pysmo\"\ncopyright = \"2019, Pysmo Project\"\nauthor = \"Pysmo Project\"\n</pre> project = \"Pysmo\" copyright = \"2019, Pysmo Project\" author = \"Pysmo Project\" In\u00a0[\u00a0]: Copied! <pre># The full version, including alpha/beta/rc tags\nrelease = pkg_resources.get_distribution(\"pysmo.aimbat\").version\n</pre> # The full version, including alpha/beta/rc tags release = pkg_resources.get_distribution(\"pysmo.aimbat\").version In\u00a0[\u00a0]: Copied! <pre># The short X.Y version\nversion = \".\".join(release.split(\".\")[:2])\n</pre> # The short X.Y version version = \".\".join(release.split(\".\")[:2]) <p>-- General configuration ---------------------------------------------------</p> <p>If your documentation needs a minimal Sphinx version, state it here.</p> <p>needs_sphinx = '1.0'</p> In\u00a0[\u00a0]: Copied! <pre># Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    \"sphinx.ext.autodoc\",\n    \"sphinx.ext.doctest\",\n    \"sphinx.ext.coverage\",\n    \"sphinx.ext.mathjax\",\n    \"sphinx.ext.githubpages\",\n    \"sphinx.ext.autosectionlabel\",\n    \"sphinx.ext.napoleon\",\n]\n</pre> # Add any Sphinx extension module names here, as strings. They can be # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom # ones. extensions = [     \"sphinx.ext.autodoc\",     \"sphinx.ext.doctest\",     \"sphinx.ext.coverage\",     \"sphinx.ext.mathjax\",     \"sphinx.ext.githubpages\",     \"sphinx.ext.autosectionlabel\",     \"sphinx.ext.napoleon\", ] In\u00a0[\u00a0]: Copied! <pre># Add any paths that contain templates here, relative to this directory.\ntemplates_path = [\"_templates\"]\n</pre> # Add any paths that contain templates here, relative to this directory. templates_path = [\"_templates\"] In\u00a0[\u00a0]: Copied! <pre># The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\nsource_suffix = \".rst\"\n</pre> # The suffix(es) of source filenames. # You can specify multiple suffix as a list of string: # # source_suffix = ['.rst', '.md'] source_suffix = \".rst\" In\u00a0[\u00a0]: Copied! <pre># The master toctree document.\nmaster_doc = \"index\"\n</pre> # The master toctree document. master_doc = \"index\" In\u00a0[\u00a0]: Copied! <pre># The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\n</pre> # The language for content autogenerated by Sphinx. Refer to documentation # for a list of supported languages. # # This is also used if you do content translation via gettext catalogs. # Usually you set \"language\" from the command line for these cases. language = None In\u00a0[\u00a0]: Copied! <pre># List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path .\nexclude_patterns = []\n</pre> # List of patterns, relative to source directory, that match files and # directories to ignore when looking for source files. # This pattern also affects html_static_path and html_extra_path . exclude_patterns = [] In\u00a0[\u00a0]: Copied! <pre># The name of the Pygments (syntax highlighting) style to use.\npygments_style = \"sphinx\"\n</pre> # The name of the Pygments (syntax highlighting) style to use. pygments_style = \"sphinx\" <p>-- Options for HTML output -------------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre># The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = \"sphinx_rtd_theme\"\n</pre> # The theme to use for HTML and HTML Help pages.  See the documentation for # a list of builtin themes. # html_theme = \"sphinx_rtd_theme\" <p>Theme options are theme-specific and customize the look and feel of a theme further.  For a list of options available for each theme, see the documentation.</p> <p>html_theme_options = {}</p> In\u00a0[\u00a0]: Copied! <pre># Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = [\"_static\"]\n</pre> # Add any paths that contain custom static files (such as style sheets) here, # relative to this directory. They are copied after the builtin static files, # so a file named \"default.css\" will overwrite the builtin \"default.css\". html_static_path = [\"_static\"] <p>Custom sidebar templates, must be a dictionary that maps document names to template names.</p> <p>The default sidebars (for documents that don't match any pattern) are defined by theme itself.  Builtin themes are using these templates by default: <code>['localtoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html']</code>.</p> <p>html_sidebars = {}</p> In\u00a0[\u00a0]: Copied! <pre>html_logo = \"NU_Logo_purple.jpg\"\n</pre> html_logo = \"NU_Logo_purple.jpg\" <p>-- Options for HTMLHelp output ---------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre># Output file base name for HTML help builder.\nhtmlhelp_basename = \"AIMBATdoc\"\n</pre> # Output file base name for HTML help builder. htmlhelp_basename = \"AIMBATdoc\" <p>-- Options for LaTeX output ------------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre>latex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',\n    # Latex figure (float) alignment\n    #\n    # 'figure_align': 'htbp',\n}\n</pre> latex_elements = {     # The paper size ('letterpaper' or 'a4paper').     #     # 'papersize': 'letterpaper',     # The font size ('10pt', '11pt' or '12pt').     #     # 'pointsize': '10pt',     # Additional stuff for the LaTeX preamble.     #     # 'preamble': '',     # Latex figure (float) alignment     #     # 'figure_align': 'htbp', } In\u00a0[\u00a0]: Copied! <pre># Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title,\n#  author, documentclass [howto, manual, or own class]).\nlatex_documents = [\n    (\n        \"index\",\n        \"AIMBAT.tex\",\n        \"AIMBAT Documentation\",\n        \"Lay Kuan Loh, Xiaoting Lou, &amp; Suzan van der Lee\",\n        \"manual\",\n    ),\n]\n</pre> # Grouping the document tree into LaTeX files. List of tuples # (source start file, target name, title, #  author, documentclass [howto, manual, or own class]). latex_documents = [     (         \"index\",         \"AIMBAT.tex\",         \"AIMBAT Documentation\",         \"Lay Kuan Loh, Xiaoting Lou, &amp; Suzan van der Lee\",         \"manual\",     ), ] <p>-- Options for manual page output ------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre># One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (\n        \"index\",\n        \"aimbat\",\n        \"AIMBAT Documentation\",\n        [\"Lay Kuan Loh, Xiaoting Lou, &amp; Suzan van der Lee\"],\n        1,\n    )\n]\n</pre> # One entry per manual page. List of tuples # (source start file, name, description, authors, manual section). man_pages = [     (         \"index\",         \"aimbat\",         \"AIMBAT Documentation\",         [\"Lay Kuan Loh, Xiaoting Lou, &amp; Suzan van der Lee\"],         1,     ) ] <p>-- Options for Texinfo output ----------------------------------------------</p> In\u00a0[\u00a0]: Copied! <pre># Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (\n        \"index\",\n        \"AIMBAT\",\n        \"AIMBAT Documentation\",\n        \"Lay Kuan Loh, Xiaoting Lou, &amp; Suzan van der Lee\",\n        \"AIMBAT\",\n        \"Automating selection of travel wave arrival times\",\n        \"Miscellaneous\",\n    ),\n]\n</pre> # Grouping the document tree into Texinfo files. List of tuples # (source start file, target name, title, author, #  dir menu entry, description, category) texinfo_documents = [     (         \"index\",         \"AIMBAT\",         \"AIMBAT Documentation\",         \"Lay Kuan Loh, Xiaoting Lou, &amp; Suzan van der Lee\",         \"AIMBAT\",         \"Automating selection of travel wave arrival times\",         \"Miscellaneous\",     ), ] <p>-- Extension configuration -------------------------------------------------</p>"},{"location":"user-guide/changelog/","title":"Changelog","text":""},{"location":"user-guide/changelog/#aimbat-v107","title":"aimbat-v1.0.7","text":"<p>Sep 6, 2021</p> <ul> <li>Bug fixes.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v105","title":"aimbat-v1.0.5","text":"<p>Aug 18, 2019</p> <p>Main contributor: smlloyd, xlougeo.</p> <ul> <li>Lots of code clean and restructure, including src, docs, and tests. </li> <li>Package installation: make fortran optional, update dependencis, update travis, setup pipenv.</li> <li>Update documentation.</li> <li>Bug fixes.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v104","title":"aimbat-v1.0.4","text":"<p>Dec 23, 2018</p> <ul> <li>Add SAC P1 Button to the main GUI</li> <li>Plot only a subset of traces for faster data QC and (de)selection. All labels are plotted. Add a button to plot more traces</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v103","title":"aimbat-v1.0.3","text":"<p>Dec 7, 2018</p> <ul> <li>Some GUI setting changes</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v102","title":"aimbat-v1.0.2","text":"<p>Dec 5, 2018</p> <ul> <li>Add option to plot simple delay time map by matplotlib.pyplot</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v101","title":"aimbat-v1.0.1","text":"<p>Dec 4, 2018</p> <ul> <li>Fix bugs in changing trace selection status (QC), manual phase picking, and trace label.</li> <li>Change in GUI settings. Using right button dragging is enough and give up on QScrollArea.</li> <li>In cross-correlation, do not allow reverse polarity which causes cycle skipping too often.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v100","title":"aimbat-v1.0.0","text":"<p>Dec 3, 2018</p> <p>Main contributor: smlloyd:</p> <ul> <li>Use new pysmo.core.sac.SacIO (pysmo-pysmo-v0.7.0) instead of pysmo.sac.sacio.SacFile</li> <li>New setup.py:</li> <li>Wrap all scripts into a callable function and add them to entry_point, e.g., aimbat-ttpick is automatically generated in your bin folder.</li> <li>Use git commit/tag to determine version automatically.</li> <li>Setup travis</li> <li>Package uploaded to pypi.org for each release since this.</li> </ul> <p>Main contributor: xlougeo, ASankaran:</p> <ul> <li>SAC plotting and aimbat-ttpick are still using Matplotlib GUI.</li> <li>New GUI (aimbat-qttpick) using pyqtgraph for fast plotting. Similar user interactions as v0.3:</li> <li>Key pressed event handler in pyqtgraph is redefined </li> <li>Use mouse to change time window and press key 'w' to set &lt;-- work on stack only</li> <li>Press key 't[0-9]' to set time picks like SAC PPK        &lt;-- work on both stack and traces</li> <li>Mouse click on waveform to change trace selection status &lt;-- work on trace only</li> <li>Better separation between data and plot.</li> <li>Filter and sort are both in the main GUI controlled by a parameter tree.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v03-alpha1","title":"aimbat-v0.3-alpha1","text":"<p>June 3, 2018</p> <p>Main contributor: xlougeo</p> <ul> <li>Upgrade to python3 (May not back-compatible with python2). No change in functionalities from v0.2.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-v02","title":"aimbat-v0.2","text":"<p>Main contributor: lkloh</p> <p>For changes made between Dec 19, 2012 (v0.1.2) and Aug 23, 2016:</p> <ul> <li>Added a warning button if you hit ICCS-A or ICCS-B button, to make sure do did not hit it by accident. </li> <li>Hitting one of those buttons will undo all the work you did in manually picking arrival times.</li> <li>Added a button to allow you to jump to the front page. Note that hitting MCCC again will do just that. </li> <li>Added a summary of the event at the top right hand corner: Magnitude, Location, Depth</li> <li>Added a GUI to allow sorting of the seismograms according to header, time difference, file name, ...</li> <li>Added a button to return to original screen after you zoom in/out</li> </ul>"},{"location":"user-guide/changelog/#aimbat-012","title":"aimbat-0.1.2","text":"<p>Dec 19, 2012</p> <p>Main contributor: xlougeo</p> <ul> <li>Change sci format for scientific notation of sacp2: from 1e-5 to 10^{-5}</li> <li>Change font properties for station label to \"monospace\" for equal width</li> <li>Minor changes in program descriptions, example scripts </li> <li>Further code development on github.com after this version.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-011","title":"aimbat-0.1.1","text":"<p>Sep 27, 2012</p> <p>Main contributor: xlougeo</p> <ul> <li>Change setup.py and package directory: modules --&gt; src/pysmo/aimbat. </li> <li>AIMBAT becomes a part of pysmo (https://github.com/pysmo/aimbat). </li> <li>Python usage: import aimbat --&gt; from pysmo import aimbat</li> <li>Minor changes in help messages for scripts using the OptionParser module.</li> <li>Adjust figsize-related function of ttpick.py to support backends other than Tk.</li> </ul>"},{"location":"user-guide/changelog/#aimbat-01","title":"aimbat-0.1","text":"<p>Sep 19, 2012</p> <p>Main contributor: xlougeo</p> <p>First release on <code>Northwestern website &lt;https://www.earth.northwestern.edu/~xlou/aimbat.html&gt;</code>_</p>"},{"location":"user-guide/cli/","title":"Command Line","text":""},{"location":"user-guide/cli/#seismogram-files","title":"Seismogram files","text":"<p>AIMBAT uses SAC files as input. Before adding files to an AIMBAT project please ensure the following header fields are set correctly in all files:</p> <ul> <li>Seismogram begin time (SAC header B).</li> <li>Seismogram reference time (KZTIME) and date (KZDATE).</li> <li>Station name (KSTNM), latitude (STLA) and longitude STLO).</li> <li>Event origin time (O), latitude (EVLA) and longitude (EVLO).</li> </ul> <p>To detect any potential problems with the data before importing them into AIMBAT, you can use the AIMBAT cli:</p> aimbat checkdata *.BHZsacfile_01.BHZ: \u2713\u2713\u2713sacfile_02.BHZ: \u2713\u2713\u2713sacfile_03.BHZ: \u2713\u2713\u2713sacfile_04.BHZ: \u2713\u2713\u2713sacfile_05.BHZ: \u2713\u2713\u2713sacfile_06.BHZ: \u2713\u2713\u2713sacfile_07.BHZ: \u2713\u2713\u2713sacfile_08.BHZ: \u2713\u2713\u2713sacfile_09.BHZ: \u2713\u2713\u2713sacfile_10.BHZ: \u2713\u2713\u2713sacfile_11.BHZ: \u2713\u2713\u2713...sacfile_NN.BHZ: \u2713\u2713\u2713No issues found! <p>The seismogram files can be stored in an arbitrary directory (i.e. they do not necessarily need to be stored together with an AIMBAT project file).</p> <p>Warning</p> <p>After importing files into an AIMBAT project, their location (and contents) should not be changed!</p>"},{"location":"user-guide/contributors/","title":"Contributors","text":"<ul> <li>Lay Kuan Loh</li> <li>Arnav Sankaran</li> </ul>"},{"location":"user-guide/gen_ref_pages/","title":"Gen ref pages","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"Generate the code reference pages and navigation.\"\"\"\n</pre> \"\"\"Generate the code reference pages and navigation.\"\"\" In\u00a0[\u00a0]: Copied! <pre>from pathlib import Path\n</pre> from pathlib import Path In\u00a0[\u00a0]: Copied! <pre>import mkdocs_gen_files\n</pre> import mkdocs_gen_files In\u00a0[\u00a0]: Copied! <pre>nav = mkdocs_gen_files.Nav()\n</pre> nav = mkdocs_gen_files.Nav() In\u00a0[\u00a0]: Copied! <pre>for path in sorted(Path(\"aimbat\").rglob(\"*.py\")):\n    module_path = path.relative_to(\".\").with_suffix(\"\")\n    doc_path = path.relative_to(\".\").with_suffix(\".md\")\n    full_doc_path = Path(\"reference\", doc_path)\n\n    parts = tuple(module_path.parts)\n\n    if parts[-1] == \"__init__\":\n        parts = parts[:-1]\n        doc_path = doc_path.with_name(\"index.md\")\n        full_doc_path = full_doc_path.with_name(\"index.md\")\n    elif parts[-1] == \"__main__\":\n        continue\n\n    nav[parts] = doc_path.as_posix()\n\n    with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:\n        ident = \".\".join(parts)\n        fd.write(f\"::: {ident}\")\n\n    mkdocs_gen_files.set_edit_path(full_doc_path, path)\n</pre> for path in sorted(Path(\"aimbat\").rglob(\"*.py\")):     module_path = path.relative_to(\".\").with_suffix(\"\")     doc_path = path.relative_to(\".\").with_suffix(\".md\")     full_doc_path = Path(\"reference\", doc_path)      parts = tuple(module_path.parts)      if parts[-1] == \"__init__\":         parts = parts[:-1]         doc_path = doc_path.with_name(\"index.md\")         full_doc_path = full_doc_path.with_name(\"index.md\")     elif parts[-1] == \"__main__\":         continue      nav[parts] = doc_path.as_posix()      with mkdocs_gen_files.open(full_doc_path, \"w\") as fd:         ident = \".\".join(parts)         fd.write(f\"::: {ident}\")      mkdocs_gen_files.set_edit_path(full_doc_path, path) In\u00a0[\u00a0]: Copied! <pre>with mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:\n    nav_file.writelines(nav.build_literate_nav())\n</pre> with mkdocs_gen_files.open(\"reference/SUMMARY.md\", \"w\") as nav_file:     nav_file.writelines(nav.build_literate_nav())"},{"location":"user-guide/gpl-3.0/","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"user-guide/gpl-3.0/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"user-guide/gpl-3.0/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"user-guide/gpl-3.0/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"user-guide/gpl-3.0/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"user-guide/gpl-3.0/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"user-guide/gpl-3.0/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"user-guide/gpl-3.0/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"user-guide/gpl-3.0/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"user-guide/gpl-3.0/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"user-guide/gpl-3.0/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"user-guide/gpl-3.0/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"user-guide/gpl-3.0/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"user-guide/gpl-3.0/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"user-guide/gpl-3.0/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"user-guide/gpl-3.0/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"user-guide/gpl-3.0/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License.","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"user-guide/gpl-3.0/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"user-guide/gpl-3.0/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"user-guide/gpl-3.0/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"user-guide/gpl-3.0/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"user-guide/gpl-3.0/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"user-guide/gui/","title":"Graphical UI","text":""},{"location":"user-guide/help/","title":"Getting Help","text":""},{"location":"user-guide/help/#on-github","title":"On Github","text":""},{"location":"user-guide/overview/","title":"Using AIMBAT","text":"<p>Once installed, AIMBAT can be used in several ways:</p> <ul> <li>As a command line application.</li> <li>Within a notebook<sup>1</sup>.</li> <li>As a GUI (graphical user interface) application.</li> </ul> <p>Complete walkthroughs for each of these options are presented in the following sections.</p> <p>Tip</p> <p>AIMBAT project files are independent of user interface. In other words, existing projects can be opened in any way (cli, notebook, gui).</p> <ol> <li> <p>Jupyter Lab/Notebook is not bundled with AIMBAT.\u00a0\u21a9</p> </li> </ol>"}]}